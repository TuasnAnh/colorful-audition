{"version":3,"sources":["system/BgRenderSystem.js","system/ArrowButtonRenderSystem.js","system/InputHandlerGameScreenSystem.js","system/ButtonRenderSystem.js","system/BarDurationRenderSystem.js","system/HandAnimationRenderSystem.js","components/orthoCamera2.js","system/CurtainRenderSystem.js","system/caroBgRenderSystem.js","utils/coordUtils.js","screen/EndScreen.js","screen/GameScreen.js","data.js","createWorld.js","components/xml2json.js","components/loadSCML.js","components/textureRegion.js","components/loadJsonAtlas.js","loadSpriter.js","screen/StartScreen.js","index.js"],"names":["createBackGroundRenderSystem","tableInfos","init","worldState","width","table","height","assets","auditionAtlas","findRegion","TABLE_WIDTH","TABLE_HEIGHT","tex","w","h","update","delta","boundaryY","batch","camera","setProjection","combined","begin","setColor","draw","end","createRenderArrowButtonSystem","finishTex","starEffect","SE_WIDHT","SE_HEIGHT","buttonTex","buttonRect","finishRect","scaleButton","scaleFinish","atlas","finishAtlas","upButton","downButton","leftButton","rightButton","upButtonPress","downButtonPress","leftButtonPress","rightButtonPress","finishButton","FINISH_WIDTH","FINISH_HEIGHT","BUTTON_WIDTH","BUTTON_HEIGHT","horizonalMargin","BUTTON_START_LEFT_X","BUTTON_START_LEFT_y","x","y","unpress","press","whiteTex","finishedPhase","hitFinishButton","Math","max","min","scale1","opacity1","scale2","opacity2","i","length","keyActivated","activateKey","key","deactivateKey","checkHitRight","type","notes","phaseIndex","currentCheckingNoteIndex","activated","zoomOutNoteIndexs","push","createInputHandleGameScreenSystem","rectTouches","coord","Vector2","canvas","pixelRatio","inputHandler","addEventListener","id","runIntro","setVector","getTouchedWorldCoord","rectIndex","rect","getRectContainPoint","getRectPassButtonPoint","canPassPhase","hit","hitRight","miss","disableNode","document","e","which","createButtonRenderSystem","downBtn","upBtn","leftBtn","rightBtn","downBtnGray","upBtnGray","leftBtnGray","rightBtnGray","active","passive","noteInfos","zoomOutNoteInfos","currentNotesPhase","currentNotesInfos","index","scale","postion","splice","note","createDurationRenderSystem","finishBar","finishMark","finishMetter","markEffect","durationZone","BAR_WIDTH","METTER_WIDTH","MARK_WIDTH","ME_WIDTH","ME_HEIGHT","cool","great","perfect","textList","textListInfos","finishBarInfos","finishMetterInfos","finishMarkInfos","COOL_H","COOL_W","GREAT_H","GREAT_W","PERFECT_H","PERFECT_W","MISS_H","MISS_W","BAR_HEIGHT","BAR_START_X","MARK_HEIGHT","METTER_HEIGHT","stateTime","realTimeDurationSet","durationEachPhase","texture","scoreType","centerTime","minTime","infos","checkScoreType","textPopUp","startY","opacity","finishMarkEffect","createHandAnimationRenderSystem","offsetX","offsetY","DRAW_WIDTH","DRAW_HEIGHT","animOffset","bam_sai","buom_bay_right","xoa_tay","buom_bay_left","choang_nhau","tinh_ban","ca_sau","spriter","resizeCanvas","cWidth","cHeight","viewportWidth","viewportHeight","mat4","create","transform","invOrtho","lookAtMatrix","position","tmp3","eye","center","up","ortho","identity","lookAt","mul","invert","setMatrix","mat","copy","setYUp","yUp","setPosition","unprojectVector2","out","input","unproject","set","resize","newWidth","newHeight","createOrthoCamera2","getAspect","setEntity","setAnim","anim","offset","getAnim","createCurtainRenderSystem","curtainInfors","curtain","CURTAIN_WIDTH","CURTAIN_HEIGHT","fillRect","createCaroRenderSystem","backGroundInfos","bg","BG_WIDTH","BG_HEIGHT","checkPointInsideRect","point","verts","DEVICE_PIXEL_RATIO","minX","maxX","minY","maxY","createRenderEndScreenSystem","Game","goToStartScreen","a","createRenderStartScreenSystem","setCurrentScreen","viewport","createViewportAwareInputHandler","startEndAtlas","restartButton","quote","yourScore","percentage","RB_WIDTH","RB_HEIGHT","RB_START_X","RB_START_Y","Q_WIDHT","Q_HEIGHT","YS_WIDTH","YS_HEIGH","number0","number1","number2","number3","number4","number5","number6","number7","number8","number9","NB_HEIGHT","numberInfos","percentageInfos","numberList","sumLength","START_X","distanceTmp","caculateString","result","char","charAt","parseInt","getStringInfos","completePercentage","toString","destroy","cleanup","gl","sound","lines","split","value","map","s","trim","start","parseFloat","duration","nodes","dancingDuration","intro","shift","play","scripts","tmpArray","floor","random","NOTE_SIZE","NOTE_MARGIN","NOTE_START_Y","NOTE_RECTS","NOTE_Y","NOTE_X","j","noteI","abs","missAnim","animIndex","gameOver","buttonInfos","durationBarInfos","world","extra","systems","passiveSystems","addSystem","system","runPassive","createWorld","goToEndScreen","timeAccumulate","counter","animCounter","readyToChangePhase","loadNewPhase","undefined","xml","tab","X","toObj","o","nodeType","attributes","nodeName","nodeValue","firstChild","textChild","cdataChild","hasElementChild","n","nextSibling","match","removeWhite","escape","Array","innerXml","documentElement","alert","toJson","name","ind","json","join","arr","m","node","innerHTML","asXml","c","txt","replace","normalize","nxt","removeChild","packFileUrl","regionNames","spriter_data","fetch","then","res","text","packFileContent","parser","DOMParser","xml_text","parseFromString","json_text","xml2json","JSON","parse","spriter_json","Data","load","folder_array","forEach","folder","file_array","file","fileIndex","pose","Pose","data","rawData","TextureRegion","originX","originY","extraData","invTexWidth","invTexHeight","u","v","u2","v2","this","rotated","cols","rows","regionWidth","regionHeight","regions","rotation","scaleX","scaleY","concatAndResolveUrl","url","concat","url1","url2","url3","l","pop","loadUrl","textureOptions","textureRegions","sites","obj","meta","Object","getOwnPropertyNames","frames","framesArray","keys","image","frame","site","rotate","offset_x","spriteSourceSize","offset_y","original_w","sourceSize","original_h","region","trimmed","app","format","main_texture","size","version","loadTexture","invTextWidth","invTextHeight","listPackFileUrl","isArray","getRegions","scmlUrl","rectName","loadSCML","atlasInfos","transformMatrix","vertices","Float32Array","arr1","arr2","arr3","arr4","xy1","xy2","xy3","xy4","loadJsonAtlas","info","setArr","v1","v3","v4","v5","generateVertices","affine","color","translate","rotateZ","rad","vec3","transformMat4","domain","range","getInfos","rectObject","strike","entityKey","entity","entity_map","obj_info_map","px","object_array","find","world_space","py","pw","ph","prevX","prevY","prevW","prevH","nudged","estimate","folder_index","file_index","drawVertices","loadSpriter","startButton","NB1_WIDHT","NB1_HEIGHT","NB2_WIDHT","NB2_HEIGHT","NB3_HEIGHT","NB3_WIDHT","startCountDown","scale3","goToGameScreen","createRenderGameScreenSystem","scaleState","getElementById","window","devicePixelRatio","createViewport","getContext","getCamera","createBatch","createWhiteText","Howl","src","screen","currentScreen","loadAtlas","clearColor","clear","COLOR_BUFFER_BIT","createGameLoop"],"mappings":"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","file":"static/js/main.e742c5cc.chunk.js","sourcesContent":["const createBackGroundRenderSystem = () => {\r\n  let tableInfos = {};\r\n  // let backGroundInfos = {};\r\n  return {\r\n    init(worldState, { width, height, assets }) {\r\n      let atlas = assets.auditionAtlas;\r\n      const table = atlas.findRegion(\"table\", -1);\r\n      const TABLE_WIDTH = width;\r\n      const TABLE_HEIGHT = (TABLE_WIDTH * table.height) / table.width;\r\n      tableInfos = { tex: table, w: TABLE_WIDTH, h: TABLE_HEIGHT };\r\n\r\n      // const bg = atlas.findRegion(\"bg\", -1);\r\n      // const BG_WIDTH = width;\r\n      // const BG_HEIGHT = (BG_WIDTH * bg.height) / bg.width;\r\n      // backGroundInfos = { tex: bg, w: BG_WIDTH, h: BG_HEIGHT };\r\n    },\r\n    update(delta, { boundaryY }, { batch, width, height, camera }) {\r\n      batch.setProjection(camera.combined);\r\n      batch.begin();\r\n      batch.setColor(1, 1, 1, 1);\r\n      // backGroundInfos.tex.draw(\r\n      //   batch,\r\n      //   width / 2 - backGroundInfos.w / 2,\r\n      //   -backGroundInfos.h / 30,\r\n      //   backGroundInfos.w,\r\n      //   backGroundInfos.h\r\n      // );\r\n\r\n      tableInfos.tex.draw(\r\n        batch,\r\n        width / 2 - tableInfos.w / 2,\r\n        boundaryY,\r\n        tableInfos.w,\r\n        tableInfos.h\r\n      );\r\n\r\n      batch.end();\r\n    },\r\n  };\r\n};\r\n\r\nexport default createBackGroundRenderSystem;\r\n","// import { fillRect } from \"gdxjs\";\r\n\r\nconst createRenderArrowButtonSystem = () => {\r\n  let buttonTex = [];\r\n  let buttonRect = [];\r\n  let finishRect = {};\r\n  let finishTex;\r\n  let starEffect, SE_WIDHT, SE_HEIGHT;\r\n  let scaleButton = 1;\r\n  let scaleFinish = 0.4;\r\n  return {\r\n    init(worldState, { width, height, assets }) {\r\n      const atlas = assets.auditionAtlas;\r\n      const finishAtlas = assets.finishAtlas;\r\n      const upButton = atlas.findRegion(\"up\", -1);\r\n      const downButton = atlas.findRegion(\"down\", -1);\r\n      const leftButton = atlas.findRegion(\"left\", -1);\r\n      const rightButton = atlas.findRegion(\"right\", -1);\r\n      const upButtonPress = atlas.findRegion(\"up-press\", -1);\r\n      const downButtonPress = atlas.findRegion(\"down-press\", -1);\r\n      const leftButtonPress = atlas.findRegion(\"left-press\", -1);\r\n      const rightButtonPress = atlas.findRegion(\"right-press\", -1);\r\n      const finishButton = atlas.findRegion(\"finish_press\", -1);\r\n\r\n      starEffect = finishAtlas.findRegion(\"finish_start_effect\", -1);\r\n\r\n      SE_WIDHT = width / 8;\r\n      SE_HEIGHT = (SE_WIDHT * starEffect.height) / starEffect.width;\r\n\r\n      const FINISH_WIDTH = width / 4;\r\n      const FINISH_HEIGHT =\r\n        (FINISH_WIDTH * finishButton.height) / finishButton.width;\r\n\r\n      const BUTTON_WIDTH = width / 5;\r\n      const BUTTON_HEIGHT = (BUTTON_WIDTH * upButton.height) / upButton.width;\r\n\r\n      const horizonalMargin = BUTTON_WIDTH * 0.8;\r\n      const BUTTON_START_LEFT_X =\r\n        (width - (BUTTON_WIDTH * 2 + horizonalMargin)) / 2;\r\n      const BUTTON_START_LEFT_y = (height * 3.95) / 5;\r\n\r\n      finishTex = finishButton;\r\n      finishRect = {\r\n        x:\r\n          BUTTON_START_LEFT_X +\r\n          BUTTON_WIDTH +\r\n          horizonalMargin / 2 -\r\n          FINISH_WIDTH / 2,\r\n        y: BUTTON_START_LEFT_y + BUTTON_HEIGHT / 2 - FINISH_HEIGHT / 2,\r\n        width: FINISH_WIDTH,\r\n        height: FINISH_HEIGHT,\r\n      };\r\n\r\n      buttonTex = [\r\n        { unpress: leftButton, press: leftButtonPress },\r\n        { unpress: upButton, press: upButtonPress },\r\n        { unpress: rightButton, press: rightButtonPress },\r\n        { unpress: downButton, press: downButtonPress },\r\n      ];\r\n      buttonRect = [\r\n        {\r\n          x: BUTTON_START_LEFT_X,\r\n          y: BUTTON_START_LEFT_y,\r\n          width: BUTTON_WIDTH,\r\n          height: BUTTON_HEIGHT,\r\n        },\r\n        {\r\n          x: BUTTON_START_LEFT_X + BUTTON_WIDTH / 2 + horizonalMargin / 2,\r\n          y: BUTTON_START_LEFT_y - BUTTON_HEIGHT * 0.8,\r\n          width: BUTTON_WIDTH,\r\n          height: BUTTON_HEIGHT,\r\n        },\r\n        {\r\n          x: BUTTON_START_LEFT_X + BUTTON_WIDTH + horizonalMargin,\r\n          y: BUTTON_START_LEFT_y,\r\n          width: BUTTON_WIDTH,\r\n          height: BUTTON_HEIGHT,\r\n        },\r\n        {\r\n          x: BUTTON_START_LEFT_X + BUTTON_WIDTH / 2 + horizonalMargin / 2,\r\n          y: BUTTON_START_LEFT_y + BUTTON_HEIGHT * 0.8,\r\n          width: BUTTON_WIDTH,\r\n          height: BUTTON_HEIGHT,\r\n        },\r\n      ];\r\n\r\n      worldState.buttonRect = buttonRect;\r\n      worldState.finishRect = finishRect;\r\n    },\r\n    update(delta, worldState, { batch, camera, width, height, whiteTex }) {\r\n      batch.setProjection(camera.combined);\r\n      batch.begin();\r\n      batch.setColor(1, 1, 1, 1);\r\n\r\n      if (worldState.finishedPhase && !worldState.hitFinishButton) {\r\n        scaleButton = Math.max(0.7, (scaleButton -= delta * 2));\r\n        scaleFinish = Math.min(1, (scaleFinish += delta * 4));\r\n      } else if (!worldState.finishedPhase || worldState.hitFinishButton) {\r\n        scaleButton = Math.min(1, (scaleButton += delta * 2));\r\n        scaleFinish = Math.max(0.4, (scaleFinish -= delta * 4));\r\n      }\r\n\r\n      if (worldState.finishedPhase) {\r\n        // start effect\r\n        worldState.starEffect.scale1 += (delta * 47) / 3;\r\n        batch.setColor(1, 1, 1, worldState.starEffect.opacity1);\r\n        starEffect.draw(\r\n          batch,\r\n          finishRect.x + finishRect.width / 2 - SE_WIDHT / 2,\r\n          finishRect.y + finishRect.height / 2 - SE_HEIGHT / 2,\r\n          SE_WIDHT,\r\n          SE_HEIGHT,\r\n          SE_WIDHT / 2,\r\n          SE_HEIGHT / 2,\r\n          0,\r\n          worldState.starEffect.scale1,\r\n          worldState.starEffect.scale1\r\n        );\r\n        batch.setColor(1, 1, 1, 1);\r\n        if (worldState.starEffect.scale1 >= 4) {\r\n          worldState.starEffect.scale2 += (delta * 47) / 3;\r\n          batch.setColor(1, 1, 1, worldState.starEffect.opacity2);\r\n          starEffect.draw(\r\n            batch,\r\n            finishRect.x + finishRect.width / 2 - SE_WIDHT / 2,\r\n            finishRect.y + finishRect.height / 2 - SE_HEIGHT / 2,\r\n            SE_WIDHT,\r\n            SE_HEIGHT,\r\n            SE_WIDHT / 2,\r\n            SE_HEIGHT / 2,\r\n            0,\r\n            worldState.starEffect.scale2,\r\n            worldState.starEffect.scale2\r\n          );\r\n          batch.setColor(1, 1, 1, 1);\r\n        }\r\n        worldState.starEffect.scale1 = Math.min(\r\n          6,\r\n          worldState.starEffect.scale1\r\n        );\r\n        if (worldState.starEffect.scale1 === 6) {\r\n          worldState.starEffect.opacity1 = Math.max(\r\n            0,\r\n            (worldState.starEffect.opacity1 -= delta * 5)\r\n          );\r\n        }\r\n\r\n        worldState.starEffect.scale2 = Math.min(\r\n          6,\r\n          worldState.starEffect.scale2\r\n        );\r\n        if (worldState.starEffect.scale2 === 6) {\r\n          worldState.starEffect.opacity2 = Math.max(\r\n            0,\r\n            (worldState.starEffect.opacity2 -= delta * 5)\r\n          );\r\n        }\r\n      }\r\n\r\n      for (let i = 0; i < buttonRect.length; i++) {\r\n        let texture;\r\n        if (worldState.keyActivated[i]) {\r\n          texture = buttonTex[i].press;\r\n        } else {\r\n          texture = buttonTex[i].unpress;\r\n        }\r\n        texture.draw(\r\n          batch,\r\n          buttonRect[i].x,\r\n          buttonRect[i].y,\r\n          buttonRect[i].width,\r\n          buttonRect[i].height,\r\n          buttonRect[i].width / 2,\r\n          buttonRect[i].height / 2,\r\n          0,\r\n          scaleButton,\r\n          scaleButton\r\n        );\r\n\r\n        // fillRect(\r\n        //   batch,\r\n        //   whiteTex,\r\n        //   buttonRect[i].x,\r\n        //   buttonRect[i].y,\r\n        //   buttonRect[i].width,\r\n        //   buttonRect[i].height\r\n        // );\r\n      }\r\n\r\n      finishTex.draw(\r\n        batch,\r\n        finishRect.x,\r\n        finishRect.y,\r\n        finishRect.width,\r\n        finishRect.height,\r\n        finishRect.width / 2,\r\n        finishRect.height / 2,\r\n        0,\r\n        scaleFinish,\r\n        scaleFinish\r\n      );\r\n\r\n      batch.end();\r\n    },\r\n  };\r\n};\r\n\r\nexport default createRenderArrowButtonSystem;\r\n","import { Vector2, TextureRegion } from \"gdxjs\";\r\nconst activateKey = (key, keyActivated) => (keyActivated[key] = true);\r\nconst deactivateKey = (key, keyActivated) => (keyActivated[key] = false);\r\n\r\nconst getRectContainPoint = (x, y, buttonRect) => {\r\n  let index = -1;\r\n  for (let i = 0; i < 4; i++) {\r\n    const rect = buttonRect[i];\r\n    if (\r\n      x > rect.x &&\r\n      x < rect.x + rect.width &&\r\n      y > rect.y &&\r\n      y < rect.y + rect.height\r\n    ) {\r\n      return i;\r\n    }\r\n  }\r\n  return index;\r\n};\r\n\r\nconst getRectPassButtonPoint = (x, y, rect) => {\r\n  if (\r\n    x > rect.x &&\r\n    x < rect.x + rect.width &&\r\n    y > rect.y &&\r\n    y < rect.y + rect.height\r\n  ) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n};\r\n\r\nconst checkHitRight = (type, notes, phaseIndex, worldState) => {\r\n  if (type === notes[phaseIndex][worldState.currentCheckingNoteIndex].type) {\r\n    notes[phaseIndex][worldState.currentCheckingNoteIndex].activated = true;\r\n    worldState.zoomOutNoteIndexs.push(worldState.currentCheckingNoteIndex);\r\n    worldState.currentCheckingNoteIndex += 1;\r\n    if (worldState.currentCheckingNoteIndex === notes[phaseIndex].length) {\r\n      worldState.currentCheckingNoteIndex = notes[phaseIndex].length - 1;\r\n      worldState.finishedPhase = true;\r\n    }\r\n  } else {\r\n    // MISS++;\r\n    worldState.currentCheckingNoteIndex = 0;\r\n    for (let i = 0; i < notes[phaseIndex].length; i++) {\r\n      notes[phaseIndex][i].activated = false;\r\n    }\r\n  }\r\n};\r\n\r\nconst createInputHandleGameScreenSystem = () => {\r\n  const rectTouches = {};\r\n  let coord = new Vector2();\r\n\r\n  return {\r\n    init(worldState, { canvas, camera, pixelRatio, inputHandler }) {\r\n      const { buttonRect, notes, finishRect } = worldState;\r\n\r\n      inputHandler.addEventListener(\"touchStart\", (x, y, id) => {\r\n        if (!worldState.runIntro) {\r\n          coord.setVector(inputHandler.getTouchedWorldCoord());\r\n          const rectIndex = getRectContainPoint(coord.x, coord.y, buttonRect);\r\n          if (rectIndex > -1 && !worldState.finishedPhase) {\r\n            rectTouches[id] = rectIndex;\r\n            activateKey(rectIndex, worldState.keyActivated);\r\n            checkHitRight(rectIndex, notes, worldState.phaseIndex, worldState);\r\n          } else if (worldState.finishedPhase) {\r\n            const rectButton = getRectPassButtonPoint(\r\n              coord.x,\r\n              coord.y,\r\n              finishRect\r\n            );\r\n            if (rectButton === 1) {\r\n              if (worldState.canPassPhase) {\r\n                // console.log(\"hit\");\r\n                worldState.hit++;\r\n                worldState.hitRight = true;\r\n                // HIT++;\r\n              } else {\r\n                // console.log(\"miss\");\r\n                worldState.miss++;\r\n                // worldState.anim[worldState.animIndex] = worldState.missAnim;\r\n                // MISS++;\r\n                worldState.hitRight = false;\r\n              }\r\n              worldState.disableNode = true;\r\n              worldState.hitFinishButton = true;\r\n            }\r\n          }\r\n        }\r\n      });\r\n\r\n      inputHandler.addEventListener(\"touchEnd\", (id) => {\r\n        deactivateKey(rectTouches[id], worldState.keyActivated);\r\n      });\r\n\r\n      document.addEventListener(\"keydown\", (e) => {\r\n        if (!worldState.runIntro) {\r\n          if (e.which === 65) {\r\n            if (!worldState.finishedPhase) {\r\n              activateKey(0, worldState.keyActivated);\r\n              checkHitRight(0, notes, worldState.phaseIndex, worldState);\r\n            }\r\n          } else if (e.which === 87) {\r\n            if (!worldState.finishedPhase) {\r\n              activateKey(1, worldState.keyActivated);\r\n              checkHitRight(1, notes, worldState.phaseIndex, worldState);\r\n            }\r\n          } else if (e.which === 68) {\r\n            if (!worldState.finishedPhase) {\r\n              activateKey(2, worldState.keyActivated);\r\n              checkHitRight(2, notes, worldState.phaseIndex, worldState);\r\n            }\r\n          } else if (e.which === 83) {\r\n            if (!worldState.finishedPhase) {\r\n              activateKey(3, worldState.keyActivated);\r\n              checkHitRight(3, notes, worldState.phaseIndex, worldState);\r\n            }\r\n          }\r\n\r\n          if (worldState.finishedPhase && e.which === 32) {\r\n            if (worldState.canPassPhase) {\r\n              // console.log(\"hit\");\r\n              worldState.hit++;\r\n              worldState.hitRight = true;\r\n              // HIT++;\r\n            } else {\r\n              // console.log(\"miss\");\r\n              worldState.miss++;\r\n              worldState.hitRight = false;\r\n            }\r\n            worldState.disableNode = true;\r\n            worldState.hitFinishButton = true;\r\n          }\r\n        }\r\n      });\r\n\r\n      document.addEventListener(\"keyup\", (e) => {\r\n        if (e.which === 65) {\r\n          deactivateKey(0, worldState.keyActivated);\r\n        } else if (e.which === 87) {\r\n          deactivateKey(1, worldState.keyActivated);\r\n        } else if (e.which === 68) {\r\n          deactivateKey(2, worldState.keyActivated);\r\n        } else if (e.which === 83) {\r\n          deactivateKey(3, worldState.keyActivated);\r\n        }\r\n      });\r\n    },\r\n    update() {},\r\n  };\r\n};\r\n\r\nexport default createInputHandleGameScreenSystem;\r\n","const createButtonRenderSystem = () => {\r\n  let buttonTex = [];\r\n\r\n  return {\r\n    init(worldState, { assets }) {\r\n      const atlas = assets.auditionAtlas;\r\n\r\n      const downBtn = atlas.findRegion(\"down-btn\", -1);\r\n      const upBtn = atlas.findRegion(\"up-btn\", -1);\r\n      const leftBtn = atlas.findRegion(\"left-btn\", -1);\r\n      const rightBtn = atlas.findRegion(\"right-btn\", -1);\r\n\r\n      const downBtnGray = atlas.findRegion(\"down-btn-gray\", -1);\r\n      const upBtnGray = atlas.findRegion(\"up-btn-gray\", -1);\r\n      const leftBtnGray = atlas.findRegion(\"left-btn-gray\", -1);\r\n      const rightBtnGray = atlas.findRegion(\"right-btn-gray\", -1);\r\n\r\n      buttonTex = [\r\n        { active: leftBtn, passive: leftBtnGray },\r\n        { active: upBtn, passive: upBtnGray },\r\n        { active: rightBtn, passive: rightBtnGray },\r\n        { active: downBtn, passive: downBtnGray },\r\n      ];\r\n    },\r\n    update(\r\n      delta,\r\n      {\r\n        notes,\r\n        noteInfos,\r\n        currentCheckingNoteIndex,\r\n        phaseIndex,\r\n        zoomOutNoteIndexs,\r\n        zoomOutNoteInfos,\r\n        runIntro,\r\n        hitFinishButton,\r\n      },\r\n\r\n      { batch, width, height, camera }\r\n    ) {\r\n      let currentNotesPhase = noteInfos[phaseIndex];\r\n      let currentNotesInfos = notes[phaseIndex];\r\n      let texture;\r\n\r\n      for (let i = 0; i < zoomOutNoteIndexs.length; i++) {\r\n        let index = zoomOutNoteIndexs[i];\r\n        zoomOutNoteInfos.push({\r\n          tex: buttonTex[currentNotesInfos[index].type].passive,\r\n          scale: 2,\r\n          postion: currentNotesPhase[index],\r\n        });\r\n        zoomOutNoteIndexs.splice(i, 1);\r\n      }\r\n\r\n      batch.setProjection(camera.combined);\r\n      batch.begin();\r\n      batch.setColor(1, 1, 1, 1);\r\n      if (!hitFinishButton && !runIntro) {\r\n        for (let i = 0; i < currentNotesPhase.length; i++) {\r\n          let note = currentNotesPhase[i];\r\n          texture =\r\n            currentNotesInfos[i].activated === true\r\n              ? buttonTex[currentNotesInfos[i].type].active\r\n              : buttonTex[currentNotesInfos[i].type].passive;\r\n          texture.draw(batch, note.x, note.y, note.width, note.height);\r\n\r\n          if (zoomOutNoteInfos[i]) {\r\n            zoomOutNoteInfos[i].scale -= delta * 4;\r\n            let { tex, postion } = zoomOutNoteInfos[i];\r\n            batch.setColor(1, 1, 1, 0.5);\r\n            tex.draw(\r\n              batch,\r\n              postion.x,\r\n              postion.y,\r\n              postion.width,\r\n              postion.height,\r\n              postion.width / 2,\r\n              postion.height / 2,\r\n              0,\r\n              zoomOutNoteInfos[i].scale,\r\n              zoomOutNoteInfos[i].scale\r\n            );\r\n            batch.setColor(1, 1, 1, 1);\r\n            if (zoomOutNoteInfos[i].scale <= 1.1) {\r\n              zoomOutNoteInfos.splice(i, 1);\r\n            }\r\n          }\r\n        }\r\n      }\r\n      batch.end();\r\n    },\r\n  };\r\n};\r\n\r\nexport default createButtonRenderSystem;\r\n","const checkScoreType = (\r\n  realTimeDurationSet,\r\n  stateTime,\r\n  durationEachPhase,\r\n  durationZone,\r\n  scoreType,\r\n  textList,\r\n  textListInfos\r\n) => {\r\n  let texture;\r\n  let centerTime =\r\n    durationEachPhase - (2.3 / 4) * durationEachPhase - durationZone / 2;\r\n  let minTime = durationZone / 6;\r\n  if (\r\n    realTimeDurationSet - stateTime < centerTime + minTime &&\r\n    realTimeDurationSet - stateTime > centerTime - minTime\r\n  ) {\r\n    // console.log(\"perfect\");\r\n    scoreType = \"perfect\";\r\n    texture = { tex: textList[0], infos: textListInfos[0] };\r\n  } else if (\r\n    (realTimeDurationSet - stateTime < centerTime - minTime &&\r\n      realTimeDurationSet - stateTime > centerTime - minTime * 2) ||\r\n    (realTimeDurationSet - stateTime < centerTime + minTime * 2 &&\r\n      realTimeDurationSet - stateTime > centerTime + minTime)\r\n  ) {\r\n    // console.log(\"great\");\r\n    scoreType = \"great\";\r\n    texture = { tex: textList[1], infos: textListInfos[1] };\r\n  } else if (\r\n    (realTimeDurationSet - stateTime < centerTime - minTime * 2 &&\r\n      realTimeDurationSet - stateTime > centerTime - minTime * 3) ||\r\n    (realTimeDurationSet - stateTime < centerTime + minTime * 3 &&\r\n      realTimeDurationSet - stateTime > centerTime + minTime * 2)\r\n  ) {\r\n    // console.log(\"cool\");\r\n    scoreType = \"cool\";\r\n    texture = { tex: textList[2], infos: textListInfos[2] };\r\n  } else {\r\n    scoreType = \"miss\";\r\n    texture = { tex: textList[3], infos: textListInfos[3] };\r\n  }\r\n\r\n  return texture;\r\n};\r\n\r\nconst createDurationRenderSystem = () => {\r\n  let finishBarInfos = {};\r\n  let finishMetterInfos = {};\r\n  let finishMarkInfos = {};\r\n  let finishBar, finishMark, finishMetter, markEffect;\r\n  let durationZone;\r\n  let BAR_WIDTH, METTER_WIDTH, MARK_WIDTH, ME_WIDTH, ME_HEIGHT;\r\n  let scoreType;\r\n  let cool, great, perfect, miss, textList;\r\n  let coolInfos, greatInfos, perfectInfos, missInfos, textListInfos;\r\n  return {\r\n    init({ boundaryY }, { assets, width, height }) {\r\n      const atlas = assets.auditionAtlas;\r\n      const finishAtlas = assets.finishAtlas;\r\n\r\n      finishBar = atlas.findRegion(\"finish_bar\", -1);\r\n      finishMetter = atlas.findRegion(\"finish_metter\", -1);\r\n      finishMark = atlas.findRegion(\"finish_mark\", -1);\r\n      markEffect = finishAtlas.findRegion(\"finsh_mark_effect\", -1);\r\n\r\n      cool = finishAtlas.findRegion(\"cool\", -1);\r\n      great = finishAtlas.findRegion(\"great\", -1);\r\n      perfect = finishAtlas.findRegion(\"perfect\", -1);\r\n      miss = finishAtlas.findRegion(\"miss\", -1);\r\n\r\n      textList = [perfect, great, cool, miss];\r\n      const COOL_H = height / 25;\r\n      const COOL_W = (COOL_H * cool.width) / cool.height;\r\n      const GREAT_H = height / 25;\r\n      const GREAT_W = (GREAT_H * great.width) / great.height;\r\n      const PERFECT_H = height / 25;\r\n      const PERFECT_W = (PERFECT_H * perfect.width) / perfect.height;\r\n      const MISS_H = height / 25;\r\n      const MISS_W = (MISS_H * miss.width) / miss.height;\r\n\r\n      coolInfos = { width: COOL_W, height: COOL_H };\r\n      greatInfos = { width: GREAT_W, height: GREAT_H };\r\n      perfectInfos = { width: PERFECT_W, height: PERFECT_H };\r\n      missInfos = { width: MISS_W, height: MISS_H };\r\n      textListInfos = [perfectInfos, greatInfos, coolInfos, missInfos];\r\n\r\n      BAR_WIDTH = (width * 8.8) / 9;\r\n      const BAR_HEIGHT = (BAR_WIDTH * finishBar.height) / finishBar.width;\r\n      const BAR_START_X = (width - BAR_WIDTH) / 2;\r\n\r\n      MARK_WIDTH = BAR_WIDTH / 30;\r\n      const MARK_HEIGHT = (MARK_WIDTH * finishMark.height) / finishMark.width;\r\n\r\n      markEffect = finishAtlas.findRegion(\"finsh_mark_effect\", -1);\r\n      ME_WIDTH = MARK_WIDTH;\r\n      ME_HEIGHT = (ME_WIDTH * markEffect.height) / markEffect.width;\r\n\r\n      METTER_WIDTH = (BAR_WIDTH - MARK_WIDTH) / 4;\r\n      const METTER_HEIGHT =\r\n        (METTER_WIDTH * finishMetter.height) / finishMetter.width;\r\n\r\n      finishBarInfos = {\r\n        x: BAR_START_X,\r\n        y: boundaryY,\r\n        width: BAR_WIDTH,\r\n        height: BAR_HEIGHT,\r\n      };\r\n\r\n      finishMetterInfos = {\r\n        x: BAR_START_X + (2.3 / 4) * (BAR_WIDTH - MARK_WIDTH),\r\n        y: boundaryY + BAR_HEIGHT / 2 - METTER_HEIGHT,\r\n        width: METTER_WIDTH,\r\n        height: METTER_HEIGHT,\r\n      };\r\n\r\n      finishMarkInfos = {\r\n        y: boundaryY + BAR_HEIGHT / 2 - MARK_HEIGHT / 2,\r\n        width: MARK_WIDTH,\r\n        height: MARK_HEIGHT,\r\n      };\r\n    },\r\n    update(delta, worldState, { width, height, batch, camera }) {\r\n      let { stateTime, realTimeDurationSet, durationEachPhase } = worldState;\r\n      finishMarkInfos.x =\r\n        (width - BAR_WIDTH) / 2 +\r\n        (BAR_WIDTH * 29) / 30 -\r\n        ((realTimeDurationSet - stateTime) / durationEachPhase) *\r\n          ((BAR_WIDTH * 29) / 30);\r\n\r\n      durationZone =\r\n        (METTER_WIDTH * durationEachPhase) / (BAR_WIDTH - MARK_WIDTH) -\r\n        (MARK_WIDTH * durationEachPhase) / (BAR_WIDTH - MARK_WIDTH);\r\n\r\n      if (\r\n        realTimeDurationSet - stateTime <\r\n          durationEachPhase - (2.3 / 4) * durationEachPhase &&\r\n        realTimeDurationSet - stateTime >\r\n          durationEachPhase - (2.3 / 4) * durationEachPhase - durationZone &&\r\n        worldState.finishedPhase\r\n      ) {\r\n        worldState.canPassPhase = true;\r\n      } else {\r\n        worldState.canPassPhase = false;\r\n      }\r\n\r\n      //render\r\n      batch.setProjection(camera.combined);\r\n      batch.begin();\r\n      finishBar.draw(\r\n        batch,\r\n        finishBarInfos.x,\r\n        finishBarInfos.y,\r\n        finishBarInfos.width,\r\n        finishBarInfos.height\r\n      );\r\n\r\n      finishMetter.draw(\r\n        batch,\r\n        finishMetterInfos.x,\r\n        finishMetterInfos.y,\r\n        finishMetterInfos.width,\r\n        finishMetterInfos.height\r\n      );\r\n\r\n      if (worldState.hitFinishButton) {\r\n        // draw text\r\n        let texture = checkScoreType(\r\n          realTimeDurationSet,\r\n          stateTime,\r\n          durationEachPhase,\r\n          durationZone,\r\n          scoreType,\r\n          textList,\r\n          textListInfos\r\n        );\r\n        worldState.textPopUp.startY = Math.max(\r\n          (height * 1.1) / 3,\r\n          (worldState.textPopUp.startY -= (delta * height) / 3)\r\n        );\r\n\r\n        // console.log(worldState.textPopUp.scale);\r\n        worldState.textPopUp.scale = Math.min(\r\n          1,\r\n          (worldState.textPopUp.scale += delta * 5)\r\n        );\r\n\r\n        if (worldState.textPopUp.startY === (height * 1.1) / 3) {\r\n          worldState.textPopUp.opacity = Math.max(\r\n            0,\r\n            (worldState.textPopUp.opacity -= delta)\r\n          );\r\n        }\r\n\r\n        batch.setColor(1, 1, 1, worldState.textPopUp.opacity);\r\n        texture.tex.draw(\r\n          batch,\r\n          width / 2 - texture.infos.width / 2,\r\n          worldState.textPopUp.startY,\r\n          texture.infos.width,\r\n          texture.infos.height,\r\n          texture.infos.width / 2,\r\n          texture.infos.height / 2,\r\n          0,\r\n          worldState.textPopUp.scale,\r\n          worldState.textPopUp.scale\r\n        );\r\n      }\r\n\r\n      if (!worldState.runIntro) {\r\n        if (!worldState.hitFinishButton) {\r\n          worldState.finishMarkEffect = { scale: 1, opacity: 1 };\r\n          finishMark.draw(\r\n            batch,\r\n            finishMarkInfos.x + finishMarkInfos.width / 2,\r\n            finishMarkInfos.y,\r\n            finishMarkInfos.width,\r\n            finishMarkInfos.height\r\n          );\r\n        } else {\r\n          // mark effect\r\n          worldState.finishMarkEffect.scale = Math.min(\r\n            2.3,\r\n            (worldState.finishMarkEffect.scale += delta * 10)\r\n          );\r\n          if (worldState.finishMarkEffect.scale === 2.3) {\r\n            worldState.finishMarkEffect.opacity = Math.max(\r\n              0,\r\n              (worldState.finishMarkEffect.opacity -= delta * 5)\r\n            );\r\n          }\r\n          batch.setColor(1, 1, 1, worldState.finishMarkEffect.opacity);\r\n          markEffect.draw(\r\n            batch,\r\n            finishMarkInfos.x +\r\n              finishMarkInfos.width / 2 -\r\n              ME_WIDTH / 2 +\r\n              finishMarkInfos.width / 2,\r\n            finishMarkInfos.y + finishMarkInfos.height / 2 - ME_HEIGHT / 2,\r\n            ME_WIDTH,\r\n            ME_HEIGHT,\r\n            ME_WIDTH / 2,\r\n            ME_HEIGHT / 2,\r\n            0,\r\n            worldState.finishMarkEffect.scale,\r\n            worldState.finishMarkEffect.scale\r\n          );\r\n          batch.setColor(1, 1, 1, 1);\r\n        }\r\n      }\r\n      batch.end();\r\n    },\r\n  };\r\n};\r\n\r\nexport default createDurationRenderSystem;\r\n","import createOrthoCamera2 from \"../components/orthoCamera2\";\r\nimport { resizeCanvas } from \"gdxjs\";\r\n\r\nconst createHandAnimationRenderSystem = () => {\r\n  let camera;\r\n  const animOffset = {\r\n    bam_sai: {\r\n      x: 0,\r\n      y: 3,\r\n    },\r\n    buom_bay_right: {\r\n      x: 5,\r\n      y: -3,\r\n    },\r\n    xoa_tay: {\r\n      x: -5,\r\n      y: -5,\r\n    },\r\n    buom_bay_left: {\r\n      x: 7,\r\n      y: -3,\r\n    },\r\n    choang_nhau: {\r\n      x: 7,\r\n      y: 0,\r\n    },\r\n    tinh_ban: {\r\n      x: 9,\r\n      y: 2,\r\n    },\r\n    ca_sau: {\r\n      x: 4,\r\n      y: 5,\r\n    },\r\n  };\r\n  let offsetX, offsetY, DRAW_WIDTH, DRAW_HEIGHT;\r\n  return {\r\n    init(worldState, { width, height, canvas, pixelRatio, spriter }) {\r\n      const [cWidth, cHeight] = resizeCanvas(canvas, pixelRatio);\r\n      camera = createOrthoCamera2(width, height, cWidth, cHeight);\r\n      DRAW_WIDTH = width;\r\n      DRAW_HEIGHT = DRAW_HEIGHT = width / spriter.getAspect();\r\n      spriter.setEntity(\"hands\");\r\n      // spriter.setAnim(worldState.anim[worldState.animIndex]);\r\n    },\r\n    update(delta, worldState, { spriter, batch, width, height, pixelRatio }) {\r\n      // if (!worldState.runIntro) {\r\n      batch.setProjection(camera.combined);\r\n      batch.begin();\r\n      spriter.setAnim(worldState.anim);\r\n      spriter.update(delta * 1000);\r\n      offsetX = 0;\r\n      offsetY = 0;\r\n      const offset = animOffset[spriter.getAnim()];\r\n      // console.log(spriter.getAnim());\r\n      if (offset) {\r\n        offsetX = offset.x;\r\n        offsetY = offset.y;\r\n      }\r\n      spriter.draw(\r\n        batch,\r\n        0 + offsetX,\r\n        height / 2 - DRAW_HEIGHT / 2 + offsetY,\r\n        DRAW_WIDTH * 1.2,\r\n        DRAW_HEIGHT * 1.2,\r\n        width / height\r\n      );\r\n      batch.end();\r\n      // }\r\n    },\r\n  };\r\n};\r\n\r\nexport default createHandAnimationRenderSystem;\r\n","import { mat4 } from \"gl-matrix\";\r\nimport { unproject } from \"gdxjs/lib/mathUtils\";\r\nexport default (width, height, viewportWidth, viewportHeight) => {\r\n  const combined = mat4.create();\r\n  const transform = mat4.create();\r\n  const invOrtho = mat4.create();\r\n  const lookAtMatrix = mat4.create();\r\n  const position = [0, 0];\r\n  const NEAR = 0;\r\n  const FAR = 1;\r\n  const tmp3 = [0, 0, 0];\r\n  const eye = [0, 0, FAR];\r\n  const center = [0, 0, NEAR];\r\n  const up = [0, 1, 0];\r\n\r\n  const update = () => {\r\n    mat4.ortho(\r\n      combined,\r\n      -width / 2,\r\n      width / 2,\r\n      -height / 2,\r\n      height / 2,\r\n      NEAR,\r\n      FAR\r\n    );\r\n    const x = position[0];\r\n    const y = position[1];\r\n    eye[0] = center[0] = x;\r\n    eye[1] = center[1] = y;\r\n    mat4.identity(transform);\r\n    mat4.lookAt(lookAtMatrix, eye, center, up);\r\n    mat4.mul(transform, transform, lookAtMatrix);\r\n    mat4.mul(combined, combined, transform);\r\n    mat4.invert(invOrtho, combined);\r\n  };\r\n\r\n  update();\r\n  return {\r\n    combined,\r\n\r\n    setMatrix(mat) {\r\n      mat4.copy(combined, mat);\r\n      mat4.invert(invOrtho, combined);\r\n    },\r\n\r\n    setYUp(yUp) {\r\n      if (yUp) {\r\n        up[1] = -1;\r\n      } else {\r\n        up[1] = 1;\r\n      }\r\n\r\n      update();\r\n    },\r\n\r\n    setPosition(x, y) {\r\n      position[0] = x;\r\n      position[1] = y;\r\n      update();\r\n    },\r\n\r\n    unprojectVector2(out, input) {\r\n      tmp3[0] = input.x;\r\n      tmp3[1] = input.y;\r\n      tmp3[2] = 0;\r\n      unproject(tmp3, tmp3, invOrtho, 0, 0, viewportWidth, viewportHeight);\r\n      out.set(tmp3[0], tmp3[1]);\r\n    },\r\n\r\n    resize(newWidth, newHeight) {\r\n      width = newWidth;\r\n      height = newHeight;\r\n      update();\r\n    },\r\n  };\r\n};\r\n","import { fillRect } from \"gdxjs\";\r\n\r\nconst createCurtainRenderSystem = () => {\r\n  let curtainInfors = {};\r\n  return {\r\n    init(worldState, { assets, width }) {\r\n      const curtain = assets.curtain;\r\n      const CURTAIN_WIDTH = width;\r\n      const CURTAIN_HEIGHT = (CURTAIN_WIDTH * curtain.height) / curtain.width;\r\n      curtainInfors = { tex: curtain, w: CURTAIN_WIDTH, h: CURTAIN_HEIGHT };\r\n    },\r\n    update(delta, worldState, { camera, batch }) {\r\n      batch.setProjection(camera.combined);\r\n      batch.begin();\r\n      batch.setColor(1, 1, 1, 1);\r\n      fillRect(\r\n        batch,\r\n        curtainInfors.tex,\r\n        0,\r\n        0,\r\n        curtainInfors.w,\r\n        curtainInfors.h\r\n      );\r\n      batch.end();\r\n    },\r\n  };\r\n};\r\n\r\nexport default createCurtainRenderSystem;\r\n","const createCaroRenderSystem = () => {\r\n  let backGroundInfos = {};\r\n  return {\r\n    init(worldState, { assets, width }) {\r\n      let atlas = assets.auditionAtlas;\r\n      const bg = atlas.findRegion(\"bg\", -1);\r\n      const BG_WIDTH = width;\r\n      const BG_HEIGHT = (BG_WIDTH * bg.height) / bg.width;\r\n      backGroundInfos = { tex: bg, w: BG_WIDTH, h: BG_HEIGHT };\r\n    },\r\n    update(delta, worldState, { batch, camera, width }) {\r\n      batch.setProjection(camera.combined);\r\n      batch.begin();\r\n      batch.setColor(1, 1, 1, 1);\r\n      backGroundInfos.tex.draw(\r\n        batch,\r\n        width / 2 - backGroundInfos.w / 2,\r\n        -backGroundInfos.h / 30,\r\n        backGroundInfos.w,\r\n        backGroundInfos.h\r\n      );\r\n      batch.end();\r\n    },\r\n  };\r\n};\r\n\r\nexport default createCaroRenderSystem;\r\n","export const checkPointInsideRect = (point, verts, DEVICE_PIXEL_RATIO = 1) => {\r\n  const x = point.x * DEVICE_PIXEL_RATIO;\r\n  const y = point.y * DEVICE_PIXEL_RATIO;\r\n  // const minX = Math.min(verts[0], verts[2], verts[4], verts[6]);\r\n  // const maxX = Math.max(verts[0], verts[2], verts[4], verts[6]);\r\n  // const minY = Math.min(verts[1], verts[3], verts[5], verts[7]);\r\n  // const maxY = Math.max(verts[1], verts[3], verts[5], verts[7]);\r\n\r\n  const minX = verts[0];\r\n  const maxX = verts[0] + verts[2];\r\n  const minY = verts[1];\r\n  const maxY = verts[1] + verts[3];\r\n  if (x < minX || x > maxX || y < minY || y > maxY) return false;\r\n  return true;\r\n};\r\n","import { createViewportAwareInputHandler, fillRect } from \"gdxjs\";\r\nimport createRenderStartScreenSystem from \"./StartScreen\";\r\nimport { checkPointInsideRect } from \"../utils/coordUtils\";\r\n\r\nconst caculateString = (infos, numberInfos, width, percentageInfos) => {\r\n  let sumLength = 0;\r\n  let numberList = [];\r\n  for (let i = 0; i < infos.length; i++) {\r\n    sumLength += numberInfos[i].width;\r\n  }\r\n  sumLength += percentageInfos.width;\r\n  const START_X = width / 2 - sumLength / 2;\r\n\r\n  let distanceTmp = 0;\r\n  for (let i = 0; i < infos.length; i++) {\r\n    let numberWidth = numberInfos[i - 1] ? numberInfos[i - 1].width : 0;\r\n    distanceTmp += numberWidth;\r\n    numberList.push({\r\n      tex: numberInfos[infos[i]].tex,\r\n      x: START_X + distanceTmp,\r\n      width: numberInfos[i].width,\r\n    });\r\n  }\r\n  distanceTmp += numberInfos[numberInfos.length - 1].width;\r\n  numberList.push({\r\n    tex: percentageInfos.tex,\r\n    x: START_X + distanceTmp,\r\n    width: percentageInfos.width,\r\n  });\r\n\r\n  return numberList;\r\n};\r\n\r\nconst getStringInfos = (result) => {\r\n  let infos = [];\r\n  for (let i = 0; i < result.length; i++) {\r\n    const char = result.charAt(i);\r\n    infos.push(parseInt(char));\r\n  }\r\n  return infos;\r\n};\r\n\r\nconst createRenderEndScreenSystem = (Game) => {\r\n  const goToStartScreen = async () => {\r\n    Game.setCurrentScreen(await createRenderStartScreenSystem(Game));\r\n  };\r\n  const { batch, canvas, width, height, camera, viewport, assets } = Game;\r\n  const inputHandler = createViewportAwareInputHandler(canvas, viewport);\r\n  const atlas = assets.auditionAtlas;\r\n  const startEndAtlas = assets.startEndAtlas;\r\n\r\n  const table = atlas.findRegion(\"table\", -1);\r\n  const TABLE_WIDTH = width;\r\n  const TABLE_HEIGHT = (TABLE_WIDTH * table.height) / table.width;\r\n\r\n  const bg = atlas.findRegion(\"bg\", -1);\r\n  const BG_WIDTH = width;\r\n  const BG_HEIGHT = (BG_WIDTH * bg.height) / bg.width;\r\n\r\n  const curtain = assets.curtain;\r\n  const CURTAIN_WIDTH = width;\r\n  const CURTAIN_HEIGHT = (CURTAIN_WIDTH * curtain.height) / curtain.width;\r\n\r\n  const restartButton = startEndAtlas.findRegion(\"restart_button\", -1);\r\n  const quote = startEndAtlas.findRegion(\"quote\", -1);\r\n  const yourScore = startEndAtlas.findRegion(\"your_score\", -1);\r\n  const percentage = startEndAtlas.findRegion(\"percentage\", -1);\r\n\r\n  const RB_WIDTH = width / 4.5;\r\n  const RB_HEIGHT = (RB_WIDTH * restartButton.height) / restartButton.width;\r\n  const RB_START_X = width / 2 - RB_WIDTH / 2;\r\n  const RB_START_Y = (height * 2.3) / 3;\r\n\r\n  const buttonRect = [RB_START_X, RB_START_Y, RB_WIDTH, RB_HEIGHT];\r\n\r\n  const Q_WIDHT = width * 0.95;\r\n  const Q_HEIGHT = (Q_WIDHT * quote.height) / quote.width;\r\n\r\n  const YS_WIDTH = width / 1.8;\r\n  const YS_HEIGH = (YS_WIDTH * yourScore.height) / yourScore.width;\r\n\r\n  const number0 = startEndAtlas.findRegion(\"0_end\", -1);\r\n  const number1 = startEndAtlas.findRegion(\"1_end\", -1);\r\n  const number2 = startEndAtlas.findRegion(\"2_end\", -1);\r\n  const number3 = startEndAtlas.findRegion(\"3_end\", -1);\r\n  const number4 = startEndAtlas.findRegion(\"4_end\", -1);\r\n  const number5 = startEndAtlas.findRegion(\"5_end\", -1);\r\n  const number6 = startEndAtlas.findRegion(\"6_end\", -1);\r\n  const number7 = startEndAtlas.findRegion(\"7_end\", -1);\r\n  const number8 = startEndAtlas.findRegion(\"8_end\", -1);\r\n  const number9 = startEndAtlas.findRegion(\"9_end\", -1);\r\n\r\n  const NB_HEIGHT = height / 8;\r\n  const NB0_WIDHT = (NB_HEIGHT * number0.width) / number0.height;\r\n  const NB1_WIDHT = (NB_HEIGHT * number1.width) / number1.height;\r\n  const NB2_WIDHT = (NB_HEIGHT * number2.width) / number2.height;\r\n  const NB3_WIDHT = (NB_HEIGHT * number3.width) / number3.height;\r\n  const NB4_WIDHT = (NB_HEIGHT * number4.width) / number4.height;\r\n  const NB5_WIDHT = (NB_HEIGHT * number5.width) / number5.height;\r\n  const NB6_WIDHT = (NB_HEIGHT * number6.width) / number6.height;\r\n  const NB7_WIDHT = (NB_HEIGHT * number7.width) / number7.height;\r\n  const NB8_WIDHT = (NB_HEIGHT * number8.width) / number8.height;\r\n  const NB9_WIDHT = (NB_HEIGHT * number9.width) / number9.height;\r\n\r\n  const numberInfos = [\r\n    { tex: number0, width: NB0_WIDHT },\r\n    { tex: number1, width: NB1_WIDHT },\r\n    { tex: number2, width: NB2_WIDHT },\r\n    { tex: number3, width: NB3_WIDHT },\r\n    { tex: number4, width: NB4_WIDHT },\r\n    { tex: number5, width: NB5_WIDHT },\r\n    { tex: number6, width: NB6_WIDHT },\r\n    { tex: number7, width: NB7_WIDHT },\r\n    { tex: number8, width: NB8_WIDHT },\r\n    { tex: number9, width: NB9_WIDHT },\r\n  ];\r\n\r\n  const PT_HEIGHT = NB_HEIGHT;\r\n  const PT_WIDTH = (PT_HEIGHT * percentage.width) / percentage.height;\r\n  const percentageInfos = { tex: percentage, width: PT_WIDTH };\r\n\r\n  const result = Game.completePercentage.toString();\r\n  const stringInfos = getStringInfos(result, numberInfos);\r\n  const numberList = caculateString(\r\n    stringInfos,\r\n    numberInfos,\r\n    width,\r\n    percentageInfos\r\n  );\r\n\r\n  inputHandler.addEventListener(\"touchStart\", (x, y) => {\r\n    const point = inputHandler.getTouchedWorldCoord();\r\n    if (checkPointInsideRect({ x: point.x, y: point.y }, buttonRect)) {\r\n      Game.completePercentage = 0;\r\n      goToStartScreen();\r\n    }\r\n  });\r\n\r\n  const update = (delta) => {\r\n    // console.log(numberList);\r\n    batch.setProjection(camera.combined);\r\n    batch.begin();\r\n    batch.setColor(1, 1, 1, 1);\r\n    bg.draw(\r\n      batch,\r\n      width / 2 - BG_WIDTH / 2,\r\n      -BG_HEIGHT / 30,\r\n      BG_WIDTH,\r\n      BG_HEIGHT\r\n    );\r\n\r\n    table.draw(\r\n      batch,\r\n      width / 2 - TABLE_WIDTH / 2,\r\n      height / 2 - height / 20,\r\n      TABLE_WIDTH,\r\n      TABLE_HEIGHT\r\n    );\r\n\r\n    fillRect(batch, curtain, 0, 0, CURTAIN_WIDTH, CURTAIN_HEIGHT);\r\n\r\n    restartButton.draw(batch, RB_START_X, RB_START_Y, RB_WIDTH, RB_HEIGHT);\r\n    quote.draw(batch, width / 2 - Q_WIDHT / 2, height / 2, Q_WIDHT, Q_HEIGHT);\r\n    yourScore.draw(\r\n      batch,\r\n      width / 2 - YS_WIDTH / 2,\r\n      height / 4,\r\n      YS_WIDTH,\r\n      YS_HEIGH\r\n    );\r\n\r\n    for (let i = 0; i < numberList.length; i++) {\r\n      numberList[i].tex.draw(\r\n        batch,\r\n        numberList[i].x,\r\n        height / 3,\r\n        numberList[i].width,\r\n        NB_HEIGHT\r\n      );\r\n    }\r\n\r\n    batch.end();\r\n  };\r\n  return {\r\n    update,\r\n    destroy() {\r\n      inputHandler.cleanup();\r\n    },\r\n  };\r\n};\r\n\r\nexport default createRenderEndScreenSystem;\r\n","import { createViewportAwareInputHandler } from \"gdxjs\";\r\nimport createWorld from \"../createWorld\";\r\nimport createBackGroundRenderSystem from \"../system/BgRenderSystem\";\r\nimport createRenderArrowButtonSystem from \"../system/ArrowButtonRenderSystem\";\r\nimport createInputHandleGameScreenSystem from \"../system/InputHandlerGameScreenSystem\";\r\nimport createButtonRenderSystem from \"../system/ButtonRenderSystem\";\r\nimport createDurationRenderSystem from \"../system/BarDurationRenderSystem\";\r\nimport createHandAnimationRenderSystem from \"../system/HandAnimationRenderSystem\";\r\nimport createCurtainRenderSystem from \"../system/CurtainRenderSystem\";\r\nimport createCaroRenderSystem from \"../system/caroBgRenderSystem\";\r\nimport data from \"../data\";\r\n\r\nimport createRenderEndScreenSystem from \"./EndScreen\";\r\n\r\nexport default (Game) => {\r\n  const {\r\n    canvas,\r\n    width,\r\n    height,\r\n    gl,\r\n    batch,\r\n    whiteTex,\r\n    camera,\r\n    pixelRatio,\r\n    assets,\r\n    spriter,\r\n    viewport,\r\n    sound,\r\n  } = Game;\r\n\r\n  // const inputHandler = new InputHandler(canvas);\r\n  const inputHandler = createViewportAwareInputHandler(canvas, viewport);\r\n\r\n  const datas = data;\r\n  const lines = datas.split(\"\\n\");\r\n  const infos = [];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const value = lines[i].split(\",\").map((s) => s.trim());\r\n    infos.push({\r\n      start: parseFloat(value[0]),\r\n      duration: parseFloat(value[1]),\r\n      nodes: parseFloat(value[2]),\r\n      dancingDuration: parseFloat(value[3]),\r\n      anim: value[4],\r\n    });\r\n  }\r\n\r\n  let intro = infos[0];\r\n  infos.shift();\r\n\r\n  sound.play();\r\n\r\n  const scripts = [];\r\n  for (let i = 0; i < infos.length; i++) {\r\n    scripts.push(infos[i].nodes);\r\n  }\r\n\r\n  const notes = []; // chứa type, opacity mỗi nốt / phase\r\n\r\n  for (let s of scripts) {\r\n    const tmpArray = [];\r\n    for (let i = 0; i < s; i++) {\r\n      tmpArray.push({\r\n        type: Math.floor(Math.random() * 4),\r\n        activated: false,\r\n      });\r\n    }\r\n    notes.push(tmpArray);\r\n  }\r\n\r\n  // console.log(notes);\r\n  //  note information\r\n  const NOTE_SIZE = width / 7;\r\n  const NOTE_MARGIN = width / 100;\r\n  const NOTE_START_Y = height / 2 + height / 30;\r\n  const NOTE_RECTS = [];\r\n\r\n  for (let i = 0; i < notes.length; i++) {\r\n    const tmpArray = [];\r\n    let NOTE_Y = 0;\r\n    let NOTE_X = 0;\r\n    let length = 0;\r\n    for (let j = 0; j < notes[i].length; j++) {\r\n      let noteI = 0;\r\n      if (j <= 3) {\r\n        length = notes[i].length;\r\n        NOTE_X =\r\n          (width -\r\n            NOTE_MARGIN * (Math.min(4, length) - 1) -\r\n            NOTE_SIZE * Math.min(4, length)) /\r\n          2;\r\n        NOTE_Y = NOTE_START_Y;\r\n        noteI = j;\r\n      } else {\r\n        length = notes[i].length - 4;\r\n        NOTE_X = (width - NOTE_MARGIN * (length - 1) - NOTE_SIZE * length) / 2;\r\n        NOTE_Y = NOTE_START_Y + height / 14;\r\n        noteI = Math.abs(4 - j);\r\n      }\r\n\r\n      tmpArray.push({\r\n        x: NOTE_X + (NOTE_SIZE + NOTE_MARGIN) * noteI,\r\n        y: NOTE_Y,\r\n        width: NOTE_SIZE,\r\n        height: NOTE_SIZE,\r\n      });\r\n    }\r\n    NOTE_RECTS.push(tmpArray);\r\n  }\r\n\r\n  const missAnim = \"bam_sai\";\r\n\r\n  const worldState = {\r\n    runIntro: false,\r\n    hit: 0,\r\n    miss: 0,\r\n    anim: \"\",\r\n    missAnim: missAnim,\r\n    animIndex: -1,\r\n    stateTime: 0,\r\n    keyActivated: [],\r\n    boundaryY: height / 2 - height / 20,\r\n    gameOver: false,\r\n    buttonInfos: null,\r\n    durationBarInfos: {\r\n      duration: 4,\r\n      x: (width - (width * 4) / 5) / 2,\r\n      y: (height * 3) / 4,\r\n      width: (width * 4) / 5,\r\n      height: height / 10,\r\n    },\r\n    notes: notes,\r\n    noteInfos: NOTE_RECTS,\r\n    currentCheckingNoteIndex: 0,\r\n    phaseIndex: -1,\r\n    durationEachPhase: 4,\r\n    realTimeDurationSet: 4,\r\n    hitRight: false,\r\n    canPassPhase: false,\r\n    finishedPhase: false,\r\n    zoomOutNoteIndexs: [],\r\n    zoomOutNoteInfos: [],\r\n    hitFinishButton: false,\r\n    starEffect: { scale1: 1, opacity1: 1, scale2: 1, opacity2: 1 },\r\n    finishMarkEffect: { scale: 1, opacity: 1 },\r\n    textPopUp: { opacity: 1, scale: 0.5, startY: (height * 1.3) / 3 },\r\n  };\r\n\r\n  const extra = {\r\n    canvas,\r\n    width,\r\n    height,\r\n    gl,\r\n    batch,\r\n    whiteTex,\r\n    camera,\r\n    pixelRatio,\r\n    assets,\r\n    spriter,\r\n    inputHandler,\r\n  };\r\n\r\n  // let MISS = 0;\r\n  // let HIT = 0;\r\n\r\n  const world = createWorld(worldState, extra);\r\n  world.addSystem(createCaroRenderSystem());\r\n  world.addSystem(createHandAnimationRenderSystem());\r\n  world.addSystem(createBackGroundRenderSystem());\r\n  world.addSystem(createCurtainRenderSystem());\r\n  world.addSystem(createRenderArrowButtonSystem());\r\n  world.addSystem(createInputHandleGameScreenSystem());\r\n  world.addSystem(createDurationRenderSystem());\r\n  world.addSystem(createButtonRenderSystem());\r\n\r\n  const goToEndScreen = async () => {\r\n    Game.setCurrentScreen(await createRenderEndScreenSystem(Game));\r\n  };\r\n\r\n  let timeAccumulate = 0;\r\n  let counter = -1;\r\n  let animCounter = 0;\r\n  let readyToChangePhase = true;\r\n  let loadNewPhase = false;\r\n\r\n  const update = (delta) => {\r\n    timeAccumulate += delta;\r\n\r\n    if (\r\n      timeAccumulate > intro.start &&\r\n      timeAccumulate <= intro.start + intro.duration\r\n    ) {\r\n      worldState.anim = missAnim;\r\n      worldState.runIntro = true;\r\n    } else {\r\n      worldState.runIntro = false;\r\n\r\n      if (!worldState.hitFinishButton) {\r\n        worldState.stateTime += delta;\r\n      }\r\n\r\n      if (infos[counter + 1] !== undefined) {\r\n        if (timeAccumulate > infos[counter + 1].start) {\r\n          readyToChangePhase = true;\r\n        }\r\n\r\n        if (timeAccumulate > infos[counter + 1].start && readyToChangePhase) {\r\n          readyToChangePhase = false;\r\n          loadNewPhase = true;\r\n          counter = Math.min((counter += 1), infos.length);\r\n        }\r\n      }\r\n\r\n      if (\r\n        timeAccumulate <\r\n        infos[animCounter].start +\r\n          infos[animCounter].duration +\r\n          infos[animCounter].dancingDuration\r\n      ) {\r\n        if (worldState.hitRight) {\r\n          worldState.anim = infos[animCounter].anim;\r\n        }\r\n      } else {\r\n        animCounter = Math.min((animCounter += 1), infos.length);\r\n        worldState.anim = missAnim;\r\n      }\r\n\r\n      if (\r\n        timeAccumulate >\r\n        infos[infos.length - 1].start + infos[infos.length - 1].duration\r\n      ) {\r\n        Game.completePercentage = Math.floor(\r\n          (worldState.hit / infos.length) * 100\r\n        );\r\n        goToEndScreen();\r\n      }\r\n\r\n      if (timeAccumulate > infos[counter].start && loadNewPhase) {\r\n        loadNewPhase = false;\r\n        worldState.starEffect = {\r\n          scale1: 1,\r\n          scale2: 1,\r\n          opacity1: 1,\r\n          opacity2: 1,\r\n        };\r\n        worldState.textPopUp = {\r\n          opacity: 1,\r\n          scale: 0.5,\r\n          startY: (height * 1.3) / 3,\r\n        };\r\n        worldState.hitFinishButton = false;\r\n        worldState.hitRight = false;\r\n        worldState.finishedPhase = false;\r\n        worldState.canPassPhase = false;\r\n        worldState.zoomOutNoteIndexs.length = 0;\r\n        worldState.zoomOutNoteInfos.length = 0;\r\n        worldState.durationEachPhase = infos[counter].duration;\r\n        worldState.realTimeDurationSet =\r\n          worldState.stateTime + worldState.durationEachPhase;\r\n        worldState.currentCheckingNoteIndex = 0;\r\n        worldState.phaseIndex += 1;\r\n        worldState.phaseIndex =\r\n          worldState.phaseIndex > scripts.length - 1\r\n            ? scripts.length - 1\r\n            : worldState.phaseIndex;\r\n      }\r\n    }\r\n    batch.setProjection(camera.combined);\r\n    world.update(delta);\r\n  };\r\n\r\n  return {\r\n    update,\r\n    destroy() {\r\n      inputHandler.cleanup();\r\n    },\r\n  };\r\n};\r\n","// start, duration, note, dancingDuration, dacningAnim\r\n\r\nexport default `0,4,0,0,dance\r\n4,8,5,4,buom_bay_right\r\n13,7.5,6,5,xoa_tay\r\n23,5,4,5,buom_bay_left\r\n30,6,5,2.5,tinh_ban\r\n37,3.5,3,3,ca_sau\r\n42,3.5,4,2.5,buom_bay_right\r\n47,3.5,5,3,xoa_tay,\r\n52,7,8,2.975,buom_bay_left`;\r\n","export default (worldState, extra) => {\r\n  const systems = [];\r\n  const passiveSystems = [];\r\n  return {\r\n    addSystem(system, passive = false) {\r\n      system.init && system.init(worldState, extra);\r\n      if (passive) {\r\n        passiveSystems.push(system);\r\n      } else {\r\n        systems.push(system);\r\n      }\r\n    },\r\n    update(delta, runPassive = true) {\r\n      for (let system of systems) {\r\n        system.update(delta, worldState, extra);\r\n      }\r\n      if (runPassive) {\r\n        for (let system of passiveSystems) {\r\n          system.update(delta, worldState, extra);\r\n        }\r\n      }\r\n    }\r\n  };\r\n};\r\n","/*\tThis work is licensed under Creative Commons GNU LGPL License.\r\n\r\n\tLicense: http://creativecommons.org/licenses/LGPL/2.1/\r\n   Version: 0.9\r\n\tAuthor:  Stefan Goessner/2006\r\n\tWeb:     http://goessner.net/ \r\n*/\r\nexport default (xml, tab) => {\r\n  var X = {\r\n    toObj: function (xml) {\r\n      var o = {};\r\n      if (xml.nodeType === 1) {\r\n        // element node ..\r\n        if (xml.attributes.length)\r\n          // element with attributes  ..\r\n          for (var i = 0; i < xml.attributes.length; i++)\r\n            o[\"@\" + xml.attributes[i].nodeName] = (\r\n              xml.attributes[i].nodeValue || \"\"\r\n            ).toString();\r\n        if (xml.firstChild) {\r\n          // element has child nodes ..\r\n          var textChild = 0,\r\n            cdataChild = 0,\r\n            hasElementChild = false;\r\n          for (var n = xml.firstChild; n; n = n.nextSibling) {\r\n            if (n.nodeType === 1) hasElementChild = true;\r\n            else if (n.nodeType === 3 && n.nodeValue.match(/[^ \\f\\n\\r\\t\\v]/))\r\n              textChild++;\r\n            // non-whitespace text\r\n            else if (n.nodeType === 4) cdataChild++; // cdata section node\r\n          }\r\n          if (hasElementChild) {\r\n            if (textChild < 2 && cdataChild < 2) {\r\n              // structured element with evtl. a single text or/and cdata node ..\r\n              X.removeWhite(xml);\r\n              for (let n = xml.firstChild; n; n = n.nextSibling) {\r\n                if (n.nodeType === 3)\r\n                  // text node\r\n                  o[\"#text\"] = X.escape(n.nodeValue);\r\n                else if (n.nodeType === 4)\r\n                  // cdata node\r\n                  o[\"#cdata\"] = X.escape(n.nodeValue);\r\n                else if (o[n.nodeName]) {\r\n                  // multiple occurence of element ..\r\n                  if (o[n.nodeName] instanceof Array)\r\n                    o[n.nodeName][o[n.nodeName].length] = X.toObj(n);\r\n                  else o[n.nodeName] = [o[n.nodeName], X.toObj(n)];\r\n                } // first occurence of element..\r\n                else o[n.nodeName] = X.toObj(n);\r\n              }\r\n            } else {\r\n              // mixed content\r\n              if (!xml.attributes.length) o = X.escape(X.innerXml(xml));\r\n              else o[\"#text\"] = X.escape(X.innerXml(xml));\r\n            }\r\n          } else if (textChild) {\r\n            // pure text\r\n            if (!xml.attributes.length) o = X.escape(X.innerXml(xml));\r\n            else o[\"#text\"] = X.escape(X.innerXml(xml));\r\n          } else if (cdataChild) {\r\n            // cdata\r\n            if (cdataChild > 1) o = X.escape(X.innerXml(xml));\r\n            else\r\n              for (let n = xml.firstChild; n; n = n.nextSibling)\r\n                o[\"#cdata\"] = X.escape(n.nodeValue);\r\n          }\r\n        }\r\n        if (!xml.attributes.length && !xml.firstChild) o = null;\r\n      } else if (xml.nodeType === 9) {\r\n        // document.node\r\n        o = X.toObj(xml.documentElement);\r\n      } else alert(\"unhandled node type: \" + xml.nodeType);\r\n      return o;\r\n    },\r\n    toJson: function (o, name, ind) {\r\n      var json = name ? '\"' + name + '\"' : \"\";\r\n      if (o instanceof Array) {\r\n        for (var i = 0, n = o.length; i < n; i++)\r\n          o[i] = X.toJson(o[i], \"\", ind + \"\\t\");\r\n        json +=\r\n          (name ? \":[\" : \"[\") +\r\n          (o.length > 1\r\n            ? \"\\n\" + ind + \"\\t\" + o.join(\",\\n\" + ind + \"\\t\") + \"\\n\" + ind\r\n            : o.join(\"\")) +\r\n          \"]\";\r\n      } else if (o == null) json += (name && \":\") + \"null\";\r\n      else if (typeof o == \"object\") {\r\n        var arr = [];\r\n        for (var m in o) arr[arr.length] = X.toJson(o[m], m, ind + \"\\t\");\r\n        json +=\r\n          (name ? \":{\" : \"{\") +\r\n          (arr.length > 1\r\n            ? \"\\n\" + ind + \"\\t\" + arr.join(\",\\n\" + ind + \"\\t\") + \"\\n\" + ind\r\n            : arr.join(\"\")) +\r\n          \"}\";\r\n      } else if (typeof o == \"string\")\r\n        json += (name && \":\") + '\"' + o.toString() + '\"';\r\n      else json += (name && \":\") + o.toString();\r\n      return json;\r\n    },\r\n    innerXml: function (node) {\r\n      var s = \"\";\r\n      if (\"innerHTML\" in node) s = node.innerHTML;\r\n      else {\r\n        var asXml = function (n) {\r\n          var s = \"\";\r\n          if (n.nodeType === 1) {\r\n            s += \"<\" + n.nodeName;\r\n            for (var i = 0; i < n.attributes.length; i++)\r\n              s +=\r\n                \" \" +\r\n                n.attributes[i].nodeName +\r\n                '=\"' +\r\n                (n.attributes[i].nodeValue || \"\").toString() +\r\n                '\"';\r\n            if (n.firstChild) {\r\n              s += \">\";\r\n              for (var c = n.firstChild; c; c = c.nextSibling) s += asXml(c);\r\n              s += \"</\" + n.nodeName + \">\";\r\n            } else s += \"/>\";\r\n          } else if (n.nodeType === 3) s += n.nodeValue;\r\n          else if (n.nodeType === 4) s += \"<![CDATA[\" + n.nodeValue + \"]]>\";\r\n          return s;\r\n        };\r\n        for (var c = node.firstChild; c; c = c.nextSibling) s += asXml(c);\r\n      }\r\n      return s;\r\n    },\r\n    escape: function (txt) {\r\n      return txt\r\n        .replace(/[\\\\]/g, \"\\\\\\\\\")\r\n        .replace(/[\\\\\"]/g, '\\\\\"')\r\n        .replace(/[\\n]/g, \"\\\\n\")\r\n        .replace(/[\\r]/g, \"\\\\r\");\r\n    },\r\n    removeWhite: function (e) {\r\n      e.normalize();\r\n      for (var n = e.firstChild; n; ) {\r\n        if (n.nodeType === 3) {\r\n          // text node\r\n          if (!n.nodeValue.match(/[^ \\f\\n\\r\\t\\v]/)) {\r\n            // pure whitespace text node\r\n            var nxt = n.nextSibling;\r\n            e.removeChild(n);\r\n            n = nxt;\r\n          } else n = n.nextSibling;\r\n        } else if (n.nodeType === 1) {\r\n          // element node\r\n          X.removeWhite(n);\r\n          n = n.nextSibling;\r\n        } // any other node\r\n        else n = n.nextSibling;\r\n      }\r\n      return e;\r\n    },\r\n  };\r\n  if (xml.nodeType === 9)\r\n    // document node\r\n    xml = xml.documentElement;\r\n  var json = X.toJson(X.toObj(X.removeWhite(xml)), xml.nodeName, \"\\t\");\r\n  return (\r\n    \"{\\n\" +\r\n    tab +\r\n    (tab ? json.replace(/\\t/g, tab) : json.replace(/\\t|\\n/g, \"\")) +\r\n    \"\\n}\"\r\n  );\r\n};\r\n","import xml2json from \"./xml2json\";\r\nimport { Data, Pose } from \"spriter-lib\";\r\n\r\nexport default async (packFileUrl) => {\r\n  const regionNames = {};\r\n  let spriter_data = null;\r\n  let spriter_json;\r\n  const packFileContent = await fetch(packFileUrl).then((res) => res.text());\r\n  let match = packFileUrl.match(/.scml$/i);\r\n  if (match !== null) {\r\n    let parser = new DOMParser();\r\n    let xml_text = packFileContent.replace(/&quot;/g, '\"');\r\n    let xml = parser.parseFromString(xml_text, \"text/xml\");\r\n    let json_text = xml2json(xml, \"\\t\");\r\n    json_text = json_text.replace(/\"@(.*)\":/g, '\"$1\":');\r\n    let json = JSON.parse(json_text);\r\n    spriter_json = json.spriter_data;\r\n  } else {\r\n    spriter_json = JSON.parse(packFileContent);\r\n  }\r\n  spriter_data = new Data().load(spriter_json);\r\n\r\n  spriter_data.folder_array.forEach((folder, index) => {\r\n    regionNames[index] = {};\r\n    folder.file_array.forEach((file, fileIndex) => {\r\n      regionNames[folder.id][fileIndex] = file.name;\r\n    });\r\n  });\r\n  const pose = new Pose(spriter_data);\r\n\r\n  return { regionNames, pose, data: spriter_data, rawData: spriter_json };\r\n};\r\n","export default class TextureRegion {\r\n  static splitTexture(texture, cols, rows) {\r\n    const { width, height } = texture;\r\n    const regionWidth = width / cols;\r\n    const regionHeight = height / rows;\r\n    const regions = [];\r\n\r\n    for (let x = 0; x < cols; x++) {\r\n      for (let y = 0; y < rows; y++) {\r\n        regions.push(\r\n          new TextureRegion(\r\n            texture,\r\n            x * regionWidth,\r\n            y * regionHeight,\r\n            regionWidth,\r\n            regionHeight,\r\n            {}\r\n          )\r\n        );\r\n      }\r\n    }\r\n\r\n    return regions;\r\n  }\r\n  constructor(\r\n    tex,\r\n    x,\r\n    y,\r\n    width,\r\n    height,\r\n    originX,\r\n    originY,\r\n    extraData,\r\n    invTexWidth,\r\n    invTexHeight\r\n  ) {\r\n    if (!invTexWidth || !invTexHeight) {\r\n      invTexWidth = 1 / tex.width;\r\n      invTexHeight = 1 / tex.height;\r\n    }\r\n    const u = x * invTexWidth;\r\n    const v = y * invTexHeight;\r\n    const u2 = (x + width) * invTexWidth;\r\n    const v2 = (y + height) * invTexHeight;\r\n    this.rotated = false;\r\n    this.texture = tex;\r\n    this.x = x;\r\n    this.y = y;\r\n    this.originX = originX;\r\n    this.originY = originY;\r\n    this.width = width;\r\n    this.height = height;\r\n    this.u = u;\r\n    this.v = v;\r\n    this.u2 = u2;\r\n    this.v2 = v2;\r\n    for (let key in extraData) {\r\n      this[key] = extraData[key];\r\n    }\r\n  }\r\n\r\n  draw(\r\n    batch,\r\n    x,\r\n    y,\r\n    width,\r\n    height,\r\n    originX = 0,\r\n    originY = 0,\r\n    rotation = 0,\r\n    scaleX = 1,\r\n    scaleY = 1\r\n  ) {\r\n    batch.draw(\r\n      this.texture,\r\n      x,\r\n      y,\r\n      width,\r\n      height,\r\n      this.rotated,\r\n      originX,\r\n      originY,\r\n      rotation,\r\n      scaleX,\r\n      scaleY,\r\n      this.u,\r\n      this.v,\r\n      this.u2,\r\n      this.v2\r\n    );\r\n  }\r\n}\r\n","import { loadTexture } from \"gdxjs\";\r\nimport TextureRegion from \"./textureRegion\";\r\nfunction concatAndResolveUrl(url, concat) {\r\n  let url1 = url.split(\"/\");\r\n  let url2 = concat.split(\"/\");\r\n  let url3 = [];\r\n\r\n  for (let i = 0, l = url1.length; i < l; i++) {\r\n    if (url1[i] === \"..\") {\r\n      url3.pop();\r\n    } else if (url1[i] === \".\") {\r\n      continue;\r\n    } else {\r\n      url3.push(url1[i]);\r\n    }\r\n  }\r\n\r\n  for (let i = 0, l = url2.length; i < l; i++) {\r\n    if (url2[i] === \"..\") {\r\n      url3.pop();\r\n    } else if (url2[i] === \".\") {\r\n      continue;\r\n    } else {\r\n      url3.push(url2[i]);\r\n    }\r\n  }\r\n  return url3.join(\"/\");\r\n}\r\nconst loadUrl = async (gl, packFileUrl, textureOptions, textureRegions) => {\r\n  const packFileContent = await fetch(packFileUrl).then((res) => res.text());\r\n  const regions = [];\r\n  const sites = [];\r\n  const obj = JSON.parse(packFileContent);\r\n  const meta = obj.meta;\r\n  let name = Object.getOwnPropertyNames(obj.frames);\r\n  const framesArray = Object.keys(obj.frames).map((i) => obj.frames[i]);\r\n  const file = concatAndResolveUrl(packFileUrl, `../${meta.image}`);\r\n  for (let i = 0; i < framesArray.length; i++) {\r\n    const frame = framesArray[i];\r\n    let w = frame.frame.w,\r\n      h = frame.frame.h;\r\n    const site = {\r\n      // const frame: any = tps_json.frames[key],\r\n      // const site: Site = (data.sites[key] = new Site());\r\n      x: frame.frame.x,\r\n      y: frame.frame.y,\r\n      w: frame.frame.w,\r\n      h: frame.frame.h,\r\n      rotate: frame.rotated ? 1 : 0, // 90 degrees\r\n      offset_x: (frame.spriteSourceSize && frame.spriteSourceSize.x) || 0,\r\n      offset_y: (frame.spriteSourceSize && frame.spriteSourceSize.y) || 0,\r\n      original_w: (frame.sourceSize && frame.sourceSize.w) || w,\r\n      original_h: (frame.sourceSize && frame.sourceSize.h) || h,\r\n    };\r\n    sites.push(site);\r\n    const region = {\r\n      id: i,\r\n      name: name[i],\r\n      frame: frame.frame,\r\n      rotated: frame.rotated === \"true\",\r\n      sourceSize: frame.sourceSize,\r\n      spriteSourceSize: frame.spriteSourceSize,\r\n      trimmed: frame.trimmed,\r\n      app: meta.app,\r\n      format: meta.format,\r\n      main_texture: meta.image,\r\n      scale: meta.scale,\r\n      size: meta.size,\r\n      version: meta.version,\r\n      site: site,\r\n      meta: meta,\r\n    };\r\n    regions.push(region);\r\n  }\r\n  const tex = await loadTexture(gl, file, textureOptions);\r\n  for (const region of regions) {\r\n    const x = region.frame.x;\r\n    const y = region.frame.y;\r\n    const w = region.rotated ? region.frame.h : region.frame.w;\r\n    const h = region.rotated ? region.frame.w : region.frame.h;\r\n    const originX = region.rotated ? region.sourceSize.h : region.sourceSize.w;\r\n    const originY = region.rotated ? region.sourceSize.w : region.sourceSize.h;\r\n    const extraData = region;\r\n    const invTextWidth = 1 / region.size.w;\r\n    const invTextHeight = 1 / region.size.h;\r\n    textureRegions.push(\r\n      new TextureRegion(\r\n        tex,\r\n        x,\r\n        y,\r\n        w,\r\n        h,\r\n        originX,\r\n        originY,\r\n        extraData,\r\n        invTextWidth,\r\n        invTextHeight\r\n      )\r\n    );\r\n  }\r\n  return textureRegions;\r\n};\r\nexport default async (gl, listPackFileUrl, textureOptions) => {\r\n  let textureRegions = [];\r\n  if (Array.isArray(listPackFileUrl)) {\r\n    for (const packFileUrl of listPackFileUrl) {\r\n      textureRegions = await loadUrl(\r\n        gl,\r\n        packFileUrl,\r\n        textureOptions,\r\n        textureRegions\r\n      );\r\n    }\r\n  } else {\r\n    textureRegions = await loadUrl(\r\n      gl,\r\n      listPackFileUrl,\r\n      textureOptions,\r\n      textureRegions\r\n    );\r\n  }\r\n  return {\r\n    getRegions() {\r\n      return textureRegions;\r\n    },\r\n    findRegion(name) {\r\n      for (let i = 0; i < textureRegions.length; i++) {\r\n        if (textureRegions[i].name === name) {\r\n          return textureRegions[i];\r\n        }\r\n      }\r\n    },\r\n  };\r\n};\r\n","import loadSCML from \"./components/loadSCML\";\r\nimport loadJsonAtlas from \"./components/loadJsonAtlas\";\r\nimport nudged from \"nudged\";\r\nimport { mat4, vec3 } from \"gl-matrix\";\r\n\r\nfunction concatAndResolveUrl(url, concat) {\r\n  let url1 = url.split(\"/\");\r\n  let url2 = concat.split(\"/\");\r\n  let url3 = [];\r\n\r\n  for (let i = 0, l = url1.length; i < l; i++) {\r\n    if (url1[i] === \"..\") {\r\n      url3.pop();\r\n    } else {\r\n      url3.push(url1[i]);\r\n    }\r\n  }\r\n\r\n  for (let i = 0, l = url2.length; i < l; i++) {\r\n    if (url2[i] === \"..\") {\r\n      url3.pop();\r\n    } else if (url2[i] === \".\") {\r\n      continue;\r\n    } else {\r\n      url3.push(url2[i]);\r\n    }\r\n  }\r\n\r\n  return url3.join(\"/\");\r\n}\r\n\r\nexport default async (gl, scmlUrl, rectName) => {\r\n  const { regionNames, pose, data, rawData } = await loadSCML(scmlUrl);\r\n  const atlasInfos = rawData.atlas.i;\r\n\r\n  const transformMatrix = mat4.create();\r\n  const vertices = new Float32Array(20);\r\n  const arr1 = [];\r\n  const arr2 = [];\r\n  const arr3 = [];\r\n  const arr4 = [];\r\n  let xy1 = [];\r\n  let xy2 = [];\r\n  let xy3 = [];\r\n  let xy4 = [];\r\n\r\n  const atlas = await loadJsonAtlas(\r\n    gl,\r\n    atlasInfos.map((info) => concatAndResolveUrl(scmlUrl, `../${info.name}`))\r\n  );\r\n\r\n  let rectObject;\r\n\r\n  const setArr = (arr, v1, v2, v3, v4, v5) => {\r\n    arr.length = 0;\r\n    arr.push(v1, v2, v3, v4, v5);\r\n  };\r\n\r\n  const generateVertices = (\r\n    region,\r\n    position,\r\n    rotation,\r\n    scale,\r\n    affine,\r\n    color\r\n  ) => {\r\n    if (region.rotated) {\r\n      setArr(\r\n        arr1,\r\n        position.x - region.height / 2,\r\n        position.y - region.width / 2,\r\n        color,\r\n        region.u,\r\n        region.v\r\n      );\r\n      setArr(\r\n        arr2,\r\n        position.x + region.height / 2,\r\n        position.y - region.width / 2,\r\n        color,\r\n        region.u,\r\n        region.v2\r\n      );\r\n\r\n      setArr(\r\n        arr3,\r\n        position.x + region.height / 2,\r\n        position.y + region.width / 2,\r\n        color,\r\n        region.u2,\r\n        region.v2\r\n      );\r\n      setArr(\r\n        arr4,\r\n        position.x - region.height / 2,\r\n        position.y + region.width / 2,\r\n        color,\r\n        region.u2,\r\n        region.v\r\n      );\r\n    } else {\r\n      setArr(\r\n        arr1,\r\n        position.x - region.width / 2,\r\n        position.y - region.height / 2,\r\n        color,\r\n        region.u,\r\n        region.v2\r\n      );\r\n      setArr(\r\n        arr2,\r\n        position.x + region.width / 2,\r\n        position.y - region.height / 2,\r\n        color,\r\n        region.u2,\r\n        region.v2\r\n      );\r\n      setArr(\r\n        arr3,\r\n        position.x + region.width / 2,\r\n        position.y + region.height / 2,\r\n        color,\r\n        region.u2,\r\n        region.v\r\n      );\r\n      setArr(\r\n        arr4,\r\n        position.x - region.width / 2,\r\n        position.y + region.height / 2,\r\n        color,\r\n        region.u,\r\n        region.v\r\n      );\r\n    }\r\n\r\n    mat4.identity(transformMatrix);\r\n    mat4.translate(transformMatrix, transformMatrix, [\r\n      position.x,\r\n      position.y,\r\n      0,\r\n    ]);\r\n    mat4.rotateZ(transformMatrix, transformMatrix, rotation.rad);\r\n    mat4.scale(transformMatrix, transformMatrix, [scale.x, scale.y, 1]);\r\n    mat4.translate(transformMatrix, transformMatrix, [\r\n      -position.x,\r\n      -position.y,\r\n      0,\r\n    ]);\r\n\r\n    setArr(xy1, arr1[0], arr1[1], 0);\r\n    setArr(xy2, arr2[0], arr2[1], 0);\r\n    setArr(xy3, arr3[0], arr3[1], 0);\r\n    setArr(xy4, arr4[0], arr4[1], 0);\r\n\r\n    vec3.transformMat4(xy1, xy1, transformMatrix);\r\n    vec3.transformMat4(xy2, xy2, transformMatrix);\r\n    vec3.transformMat4(xy3, xy3, transformMatrix);\r\n    vec3.transformMat4(xy4, xy4, transformMatrix);\r\n\r\n    if (affine) {\r\n      xy1 = affine.transform(xy1);\r\n      xy2 = affine.transform(xy2);\r\n      xy3 = affine.transform(xy3);\r\n      xy4 = affine.transform(xy4);\r\n    }\r\n\r\n    vertices[0] = xy1[0];\r\n    vertices[1] = xy1[1];\r\n    vertices[2] = arr1[2];\r\n    vertices[3] = arr1[3];\r\n    vertices[4] = arr1[4];\r\n    vertices[5] = xy2[0];\r\n    vertices[6] = xy2[1];\r\n    vertices[7] = arr2[2];\r\n    vertices[8] = arr2[3];\r\n    vertices[9] = arr2[4];\r\n    vertices[10] = xy3[0];\r\n    vertices[11] = xy3[1];\r\n    vertices[12] = arr3[2];\r\n    vertices[13] = arr3[3];\r\n    vertices[14] = arr3[4];\r\n    vertices[15] = xy4[0];\r\n    vertices[16] = xy4[1];\r\n    vertices[17] = arr4[2];\r\n    vertices[18] = arr4[3];\r\n    vertices[19] = arr4[4];\r\n  };\r\n\r\n  let rect;\r\n  let domain = [\r\n    [0, 0],\r\n    [0, 0],\r\n    [0, 0],\r\n  ];\r\n  let range = [\r\n    [0, 0],\r\n    [0, 0],\r\n    [0, 0],\r\n  ];\r\n\r\n  let prevX, prevY, prevW, prevH, affine;\r\n\r\n  return {\r\n    getAnim() {\r\n      return pose.getAnim();\r\n    },\r\n    getInfos() {\r\n      return { regionNames, pose, data, rawData };\r\n    },\r\n    getAspect() {\r\n      if (!rectObject) {\r\n        return 1;\r\n      }\r\n      return rectObject.w / rectObject.h;\r\n    },\r\n    update(delta) {\r\n      pose.update(delta);\r\n      pose.strike();\r\n    },\r\n    setEntity(entityKey) {\r\n      pose.setEntity(entityKey);\r\n      const entity = pose.data.entity_map[entityKey];\r\n      rectObject = entity.obj_info_map[rectName];\r\n      affine = null;\r\n    },\r\n    setAnim(anim) {\r\n      pose.setAnim(anim);\r\n      affine = null;\r\n    },\r\n    draw(batch, x, y, width, height) {\r\n      if (!rect) {\r\n        rect = pose.object_array.find((obj) => obj.name === rectName);\r\n\r\n        const px = rect.world_space.position.x;\r\n        const py = rect.world_space.position.y;\r\n        const pw = rectObject.w * rect.world_space.scale.x;\r\n        const ph = rectObject.h * rect.world_space.scale.y;\r\n\r\n        setArr(domain[0], px - pw / 2, py - ph / 2);\r\n        setArr(domain[1], px + pw / 2, py - ph / 2);\r\n        setArr(domain[2], px - pw / 2, py + ph / 2);\r\n      }\r\n\r\n      if (\r\n        !affine ||\r\n        x !== prevX ||\r\n        y !== prevY ||\r\n        width !== prevW ||\r\n        height !== prevH\r\n      ) {\r\n        setArr(range[0], x - width / 2, y - height / 2);\r\n        setArr(range[1], x + width / 2, y - height / 2);\r\n        setArr(range[2], x - width / 2, y + height / 2);\r\n        prevX = x;\r\n        prevY = y;\r\n        prevW = width;\r\n        prevH = height;\r\n        affine = nudged.estimate(\"TS\", domain, range);\r\n      }\r\n\r\n      pose.object_array.forEach((obj) => {\r\n        if (obj.type !== \"sprite\") return;\r\n        // !this.printed && (console.log(obj) || (this.printed = true));\r\n        // Space.combine(obj.world_space, obj.local_space, obj.world_space);\r\n        const { position, rotation, scale } = obj.world_space;\r\n        if (\r\n          !regionNames[obj.folder_index] ||\r\n          !regionNames[obj.folder_index][obj.file_index]\r\n        )\r\n          return;\r\n        const region = atlas.findRegion(\r\n          regionNames[obj.folder_index][obj.file_index]\r\n        );\r\n        if (!region) return;\r\n        generateVertices(\r\n          region,\r\n          position,\r\n          rotation,\r\n          scale,\r\n          affine,\r\n          batch.color\r\n        );\r\n        batch.drawVertices(region.texture, vertices, 0);\r\n      });\r\n    },\r\n  };\r\n};\r\n","import { fillRect, createViewportAwareInputHandler } from \"gdxjs\";\r\nimport createRenderGameScreenSystem from \"./GameScreen\";\r\nimport { checkPointInsideRect } from \"../utils/coordUtils\";\r\nimport loadSpriter from \"../loadSpriter\";\r\n\r\nexport default async (Game) => {\r\n  const { batch, canvas, width, height, camera, viewport, assets, gl } = Game;\r\n\r\n  const spriter = await loadSpriter(\r\n    gl,\r\n    \"./spriter_animations/hands.scml\",\r\n    \"box_000\"\r\n  );\r\n  Game.spriter = spriter;\r\n  const inputHandler = createViewportAwareInputHandler(canvas, viewport);\r\n  const atlas = assets.auditionAtlas;\r\n  const startEndAtlas = assets.startEndAtlas;\r\n\r\n  const table = atlas.findRegion(\"table\", -1);\r\n  const TABLE_WIDTH = width;\r\n  const TABLE_HEIGHT = (TABLE_WIDTH * table.height) / table.width;\r\n\r\n  const bg = atlas.findRegion(\"bg\", -1);\r\n  const BG_WIDTH = width;\r\n  const BG_HEIGHT = (BG_WIDTH * bg.height) / bg.width;\r\n\r\n  const curtain = assets.curtain;\r\n  const CURTAIN_WIDTH = width;\r\n  const CURTAIN_HEIGHT = (CURTAIN_WIDTH * curtain.height) / curtain.width;\r\n\r\n  const number1 = startEndAtlas.findRegion(\"number1_start\", -1);\r\n  const number2 = startEndAtlas.findRegion(\"number2_Start\", -1);\r\n  const number3 = startEndAtlas.findRegion(\"number3_start\", -1);\r\n  const startButton = startEndAtlas.findRegion(\"start_button\");\r\n\r\n  const BUTTON_WIDTH = width / 2;\r\n  const BUTTON_HEIGHT = (BUTTON_WIDTH * startButton.height) / startButton.width;\r\n  const BUTTON_START_X = width / 2 - BUTTON_WIDTH / 2;\r\n  const BUTTON_START_Y = (height * 2.3) / 3;\r\n\r\n  const buttonRect = [\r\n    BUTTON_START_X,\r\n    BUTTON_START_Y,\r\n    BUTTON_WIDTH,\r\n    BUTTON_HEIGHT,\r\n  ];\r\n\r\n  const NB1_HEIGHT = height / 7;\r\n  const NB1_WIDHT = (NB1_HEIGHT * number1.width) / number1.height;\r\n\r\n  const NB2_HEIGHT = height / 7;\r\n  const NB2_WIDHT = (NB2_HEIGHT * number2.width) / number2.height;\r\n\r\n  const NB3_HEIGHT = height / 7;\r\n  const NB3_WIDHT = (NB1_HEIGHT * number3.width) / number3.height;\r\n\r\n  let startCountDown = false;\r\n  let stateTime = 0;\r\n  let scale1 = 0;\r\n  let scale2 = 0;\r\n  let scale3 = 0;\r\n\r\n  const goToGameScreen = async () => {\r\n    Game.setCurrentScreen(await createRenderGameScreenSystem(Game));\r\n  };\r\n\r\n  inputHandler.addEventListener(\"touchStart\", (x, y) => {\r\n    let point = inputHandler.getTouchedWorldCoord();\r\n    if (checkPointInsideRect({ x: point.x, y: point.y }, buttonRect)) {\r\n      startCountDown = true;\r\n    }\r\n    // goToGameScreen();\r\n  });\r\n\r\n  let scaleState = [1.1, 0.9, 1.05, 0.95, 1, 1, 1, 1, 1];\r\n  let index = [0, 0, 0];\r\n  let type = [\"bigger\", \"bigger\", \"bigger\"];\r\n\r\n  const update = (delta) => {\r\n    camera.setPosition(0, 0);\r\n    batch.setProjection(camera.combined);\r\n    batch.begin();\r\n    batch.setColor(1, 1, 1, 1);\r\n    bg.draw(\r\n      batch,\r\n      width / 2 - BG_WIDTH / 2,\r\n      -BG_HEIGHT / 30,\r\n      BG_WIDTH,\r\n      BG_HEIGHT\r\n    );\r\n\r\n    table.draw(\r\n      batch,\r\n      width / 2 - TABLE_WIDTH / 2,\r\n      height / 2 - height / 20,\r\n      TABLE_WIDTH,\r\n      TABLE_HEIGHT\r\n    );\r\n\r\n    fillRect(batch, curtain, 0, 0, CURTAIN_WIDTH, CURTAIN_HEIGHT);\r\n\r\n    startButton.draw(\r\n      batch,\r\n      buttonRect[0],\r\n      buttonRect[1],\r\n      buttonRect[2],\r\n      buttonRect[3]\r\n    );\r\n\r\n    if (startCountDown && stateTime < 3) {\r\n      let tex;\r\n      let infos;\r\n      let scale;\r\n      if (stateTime < 1) {\r\n        tex = number3;\r\n        infos = [NB3_WIDHT, NB3_HEIGHT];\r\n        if (type[0] === \"bigger\") {\r\n          scale3 += delta * 1.5;\r\n        } else {\r\n          scale3 -= delta * 1.5;\r\n        }\r\n        if (scale3 >= scaleState[index[0]] && type[0] === \"bigger\") {\r\n          type[0] = \"smaller\";\r\n          index[0]++;\r\n        }\r\n        if (scale3 <= scaleState[index[0]] && type[0] === \"smaller\") {\r\n          type[0] = \"bigger\";\r\n          index[0]++;\r\n        }\r\n        scale = scale3;\r\n        // console.log(scale, type);\r\n      } else if (stateTime > 1 && stateTime < 2) {\r\n        tex = number2;\r\n        infos = [NB2_WIDHT, NB2_HEIGHT];\r\n        if (type[1] === \"bigger\") {\r\n          scale2 += delta * 1.5;\r\n        } else {\r\n          scale2 -= delta * 1.5;\r\n        }\r\n        if (scale2 >= scaleState[index[1]] && type[1] === \"bigger\") {\r\n          type[1] = \"smaller\";\r\n          index[1]++;\r\n        }\r\n        if (scale2 <= scaleState[index[1]] && type[1] === \"smaller\") {\r\n          type[1] = \"bigger\";\r\n          index[1]++;\r\n        }\r\n        scale = scale2;\r\n      } else if (stateTime > 2 && stateTime < 3) {\r\n        tex = number1;\r\n        infos = [NB1_WIDHT, NB1_HEIGHT];\r\n        if (type[2] === \"bigger\") {\r\n          scale1 += delta * 1.5;\r\n        } else {\r\n          scale1 -= delta * 1.5;\r\n        }\r\n        if (scale1 >= scaleState[index[2]] && type[2] === \"bigger\") {\r\n          type[2] = \"smaller\";\r\n          index[2]++;\r\n        }\r\n        if (scale1 <= scaleState[index[2]] && type[2] === \"smaller\") {\r\n          type[2] = \"bigger\";\r\n          index[2]++;\r\n        }\r\n        scale = scale1;\r\n      }\r\n      stateTime += delta;\r\n      tex.draw(\r\n        batch,\r\n        width / 2 - infos[0] / 2,\r\n        (height * 1) / 5,\r\n        infos[0],\r\n        infos[1],\r\n        infos[0] / 2,\r\n        infos[1] / 2,\r\n        0,\r\n        scale,\r\n        scale\r\n      );\r\n    }\r\n\r\n    if (stateTime >= 3) {\r\n      goToGameScreen();\r\n    }\r\n    batch.end();\r\n  };\r\n\r\n  return {\r\n    update,\r\n    destroy() {\r\n      inputHandler.cleanup();\r\n    },\r\n  };\r\n};\r\n","import \"./index.css\";\r\n\r\nimport {\r\n  createBatch,\r\n  createGameLoop,\r\n  loadAtlas,\r\n  loadTexture,\r\n  createViewport,\r\n} from \"gdxjs\";\r\nimport createWhiteText from \"gl-white-texture\";\r\nimport createRenderStartScreenSystem from \"./screen/StartScreen\";\r\nimport { Howl } from \"howler\";\r\n\r\nconst init = async () => {\r\n  const canvas = document.getElementById(\"main\");\r\n\r\n  const pixelRatio = window.devicePixelRatio;\r\n  // const [width, height] = resizeCanvas(canvas, pixelRatio);\r\n\r\n  const [width, height] = [47, 100];\r\n  // const [width, height] = [46 * 10, 100 * 10];\r\n  const viewport = createViewport(canvas, width, height);\r\n  const gl = viewport.getContext();\r\n  const camera = viewport.getCamera();\r\n\r\n  const batch = createBatch(gl);\r\n  const whiteTex = createWhiteText(gl);\r\n\r\n  const sound = new Howl({\r\n    src: [\"ghen_covy.mp3\"],\r\n  });\r\n\r\n  const Game = {\r\n    completePercentage: 0,\r\n    viewport,\r\n    canvas,\r\n    width,\r\n    height,\r\n    gl,\r\n    batch,\r\n    whiteTex,\r\n    camera,\r\n    pixelRatio,\r\n    sound,\r\n    setCurrentScreen(screen) {\r\n      if (Game.currentScreen) {\r\n        Game.currentScreen.destroy();\r\n      }\r\n      Game.currentScreen = screen;\r\n    },\r\n  };\r\n\r\n  // const spriter = await loadSpriter(\r\n  //   gl,\r\n  //   \"./spriter_animations/hands.scml\",\r\n  //   \"box_000\"\r\n  // );\r\n  // Game.spriter = spriter;\r\n\r\n  const auditionAtlas = await loadAtlas(gl, \"./assets/audition_asset.atlas\");\r\n  const finishAtlas = await loadAtlas(\r\n    gl,\r\n    \"./assets/audition-assets_mark.atlas\"\r\n  );\r\n  const startEndAtlas = await loadAtlas(gl, \"./assets/start_end.atlas\");\r\n  const curtain = await loadTexture(gl, \"./assets/curtain.png\");\r\n\r\n  const assets = { auditionAtlas, finishAtlas, startEndAtlas, curtain };\r\n  Game.assets = assets;\r\n\r\n  Game.setCurrentScreen(await createRenderStartScreenSystem(Game));\r\n\r\n  gl.clearColor(0, 0, 0, 0);\r\n  const update = (delta) => {\r\n    gl.clear(gl.COLOR_BUFFER_BIT);\r\n    if (Game.currentScreen) {\r\n      Game.currentScreen.update(delta);\r\n    }\r\n  };\r\n\r\n  createGameLoop(update);\r\n};\r\n\r\ninit();\r\n"],"sourceRoot":""}